#!@PYTHON3@
#
# Name..........: @PROGRAM@ @VERSION@
# Execution.....: As normal user type: flsdk-version
# Copyright.....: @COPYRIGHT@
# License.......: @LICENSE@
# Contributors..: @AUTHORS@
# Comment.......: Part of the @PROGRAM@ Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

# standard Python modules
import os
import sys
import requests
import pwd
import sqlite3
from bs4 import BeautifulSoup

# meta data
__author__ = "@AUTHORS"
__copyright__ = "@COPYRIGHT@"
__license__ = "@LICENSE@"
__version__ = "@VERSION@"
__email__ = "@BUGS@"
__status__ = "Development"

# variables used in process
nodename="@NODENAME@"
ext = "tar.gz/download"
applist = ('comptext','comptty','flamp','fldigi','fllog','flmsg','flnet','flrig','flwkey','flwrap','linsim')
user =(pwd.getpwuid(os.getuid())[0])
homedir = ("/home" + (os.sep) + user + (os.sep) + "flsdk")
mkrd = (homedir + (os.sep) + "mkrd")
mkrdmxe = (homedir + (os.sep) + "mkrdmxe")
dirs=['homedir', 'mkrd', 'mkrdmxe']
dbf=(homedir + (os.sep) + "flsdk.db")

# sourceforge urls
alpha_url = "http://sourceforge.net/projects/fldigi/files/alpha_tests/"
test_url = "https://sourceforge.net/projects/fldigi/files/test_suite/"
release_url ="https://sourceforge.net/projects/fldigi/files/"

# add some color
C_R='\033[01;31m'       # red
C_G='\033[01;32m'       # green
C_Y='\033[01;33m'       # yellow
C_C='\033[01;36m'       # cyan
C_NC='\033[01;37m'      # no color

# make directories if they do not exist
for z in dirs:
    if not os.path.exists(z):
        os.mkdir(z)

def clear_screen():
    """Clear based on the platform"""
    if sys.platform == 'win32':
        os.system('cls')
    else:
        os.system('clear')

def chk_ext():
    """Set archive file extension ( zip or gz ) based on operating system type"""
    if sys.platform == "win32":
        ext = ("zip" + "/download")
    else:
        ext = ("gz" + "/download")

def main():
    """
     The main function performs the following tasks:
      * creates a small single table SQLite3 database
      * Check the Alpha Test Folder on Sourceforge
      * Check the Test Suite Folder on Sourceforge
      * Check local FLSDK folder for build markers
      * Renders Program Name and Version information
    """
    chk_ext()

    # create the SQLite3 database by connecting to it    
    conn = sqlite3.connect(dbf)
    cur = conn.cursor()
    cur.execute("""DROP TABLE IF EXISTS VER""")
    cur.execute('''CREATE TABLE VER
       (NAME    TEXT    PRIMARY KEY UNIQUE NOT NULL,
       ALPHA    TEXT,
       RELEASED TEXT,
       LINUX    TEXT,
       MXE      TEXT);''')

    # Loop through each file found in the Alpha Folder on sourceforge
    Url = "https://sourceforge.net/projects/fldigi/files/alpha_tests/"
    print("* Getting Alpha Program Versions")
    source = requests.get(alpha_url)
    data = source.text
    soup = BeautifulSoup(data, "lxml")

    for line in soup.findAll('a'):
        if line.has_attr('href'):
            if(line['href'].endswith(ext)):
                a1 = str(line['href'])
                af = a1.split("alpha_tests/", 1)[1][:-9]
                an = af.split("-", 1)[0]
                av = af.split("-", 1)[1][:-7]
                cur.execute('''INSERT or IGNORE into VER (NAME,ALPHA) values (?,?);''', (an,av))
                conn.commit()
                cur.execute('''UPDATE VER SET NAME= ?, ALPHA = ? WHERE NAME= ?;''', (an,av,an))
                conn.commit()
    
    # Loop through each file found in the Test Folder on Sourceforge
    print("* Getting Test Suite Program Versions")
    source = requests.get(test_url)
    data = source.text
    soup = BeautifulSoup(data, "lxml")

    for line in soup.findAll('a'):
        if line.has_attr('href'):
            if(line['href'].endswith(ext)):
                a1 = str(line['href'])
                af = a1.split("test_suite/", 1)[1][:-9]
                tn = af.split("-", 1)[0]
                tv = af.split("-", 1)[1][:-7]
                cur.execute('''INSERT or IGNORE into VER (NAME,RELEASED) values (?,?);''', (tn,tv))
                conn.commit()
                cur.execute('''UPDATE VER SET NAME= ?, RELEASED = ? WHERE NAME = ?;''', (tn,tv,tn))
                conn.commit()

    # Loop through each file found in the Released Folder on Sourceforge
    print("* Getting Released Program Versions:")
    for p in applist:
        print(C_C + "  %s" % p + C_NC)
        source = requests.get(release_url + p)
        data = source.text
        soup = BeautifulSoup(data, "lxml")

        for line in soup.findAll('a'):
            if line.has_attr('href'):
                if(line['href'].endswith(ext)):
                    a1 = str(line['href'])
                    af = a1.split("files/" + p + "/", 1)[1][:-9]
                    rn = af.split("-", 1)[0]
                    rv = af.split("-", 1)[1][:-7]
                    cur.execute('''INSERT or IGNORE into VER (NAME,RELEASED) values (?,?);''', (rn,rv))
                    conn.commit()
                    cur.execute('''UPDATE VER SET NAME= ?, RELEASED = ? WHERE NAME = ?;''', (rn,rv,rn))
                    conn.commit()

    # Loop through FLSDK build marker files in mkrd adn mkrdmxe
    for p in applist:
        lfile = (mkrd + (os.sep) + p + "-version.mkr")
        mfile = (mkrdmxe + (os.sep) + p + "-version.mkr")
        f_list=['lfile' 'mfile']
        for f in f_list:
            if os.path.isfile(lfile):
                with open(lfile) as f:
                    lver = f.read().splitlines()[0]
                f.close()
                cur.execute('''INSERT or IGNORE into VER (NAME,LINUX) values (?,?);''', (p,lver))
                conn.commit()
                cur.execute('''UPDATE VER SET NAME= ?, LINUX = ? WHERE NAME = ?;''', (p,lver,p))
                conn.commit()
            if os.path.isfile(mfile):
                with open(mfile) as f:
                    mver = f.read().splitlines()[0]
                f.close()
                cur.execute('''INSERT or IGNORE into VER (NAME,MXE) values (?,?);''', (p,mver))
                conn.commit()
                cur.execute('''UPDATE VER SET NAME= ?, MXE = ? WHERE NAME = ?;''', (p,mver,p))
                conn.commit()

    # print the data table header
#    print('')
#    if nodename == "WIN-10":
#        print(C_G + 'Program\t\t','Alpha\t\t', 'Released\t', 'Cross' + C_NC)
#        print(60 * '-')
#    else:
#        print(C_G + 'Program\t\t','Alpha\t\t', 'Released\t', 'Cross\t\t', 'Native' + C_NC)
#        print(75 * '-')
#    cur.execute("SELECT * from VER ORDER by NAME ASC")

#    # Format the output form sql query
#    for row in cur:
#        dname = row[0]
#        dalpha = row[1]
#        dreleased = row[2]
#        dnative = row[3]
#        dmxe = row[4]

#        if len(dname) < 7:
#            tb1 = '\t\t'
#        else:
#            tb1 = '\t'

#        if dalpha == None:
#            tb2 = '\t\t'
#        else:
#            tb2 = '\t'

#        if len(dreleased) < 6:
#            tb3 = '\t\t'
#        else:
#            tb3 = '\t'

#        if dnative == None:
#            tb4 = '\t\t'
#        else:
#            if len(dnative) >= 6:
#                tb4 = '\t'
#            else:
#                tb4 = '\t\t'
#        
#        """ print the data from the VERSION table data"""
#        if nodename == "WIN-10":
#            print(dname,tb1,dalpha,tb2,dreleased,tb3,dmxe)
#        else:
#            print(dname,tb1,dalpha,tb2,dreleased,tb3,dmxe,tb4,dnative)

#    conn.close()
#    print('' + C_NC)

if __name__ == "__main__":
    main()
