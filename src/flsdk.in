#!/usr/bin/env bash
#
# Name..........: @PROGRAM@ @VERSION@
# Execution.....: As normal user type: flsdk
# Copyright.....: @COPYRIGHT@
# License.......: @LICENSE@
# Contributors..: @AUTHORS@
# Comment.......: Part of the @PROGRAM@ Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

# user and group information
LOGNAME=@LOGNAME@
LOGGRP=$(groups @LOGNAME@ | cut -d ' ' -f 3)

# home and main options
HOMEDIR=@HOMEDIR@
SEPARATE=@SEPARATE@
JJ=@JJJJ@

# system informaiton / selections
DESC='@DESC@'
HOST_OS=@HOST_OS@
HOST_CPU=@HOST_CPU@

# system directories
DOCS=@DOCDIR@
PATCHD=@PATCHD@
WATCHD=@WATCHD@

# application install directories
COMPTEXTI="$HOMEDIR/comptext"
COMPTTYI="$HOMEDIR/comptty"
FLAMPI="$HOMEDIR/flamp"
FLDIGII="$HOMEDIR/fldigi"
FLLOGI="$HOMEDIR/fllog"
FLMSGI="$HOMEDIR/flmsg"
FLNETI="$HOMEDIR/flmsg"
FLRIGI="$HOMEDIR/flrig"
FLWKEYI="$HOMEDIR/flwkey"
FLWRAPI="$HOMEDIR/flwrap"
LINSIMI="$HOMEDIR/linsim"

# general use directories and variables
LOGD="$HOMEDIR/logs"
MKRD="$HOMEDIR/mkrd"
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
WIN32="$HOMEDIR/win32"
VERLOG="$TMPD/ver.tmp"

# unicode variables
CHK=${C_G}✔${C_NC}
NONE="✘"

# make sure all directories exist
mkdir -p "$HOMEDIR"/{win32,src,tmp,logs,mkrd}
mkdir -p "$WIN32"/{flamp,fldigi,fllog,flmsg,flnet,flrig,flwkey,flwrap,comptest,comptty,linsim}
mkdir -p "$COMPTEXTI" "$COMPTTYI" "$FLAMPI" "$FLDIGII" "$FLLOGI" "$FLMSGI" "$FLNETI" "$FLRIGI" "$FLWKEYI" "$FLWRAPI"

# setup build arrays
declare -a default_build_array=( 'build_header' 'git_check' 'get_version' \
'configure_header' 'set_installd' 'default_configure' 'default_make' 'default_install' \
'default_version' 'copy_build_logs' 'install_marker' 'change_ownership' \
'clean_after_build' 'build_summary')

# version check function array
declare -a vc_array=('vc_header' 'vc_uscan' 'vc_inet' \
'vc_sf' 'vc_message_header' 'vc_flamp' 'vc_fldigi' \
'vc_flmsg' 'vc_flnet' 'vc_flrig' 'vc_flwkey' 'vc_flwrap' 'vc_results')

# watch file array
declare -a watch_array=( 'flamp-alpha-watch' 'flamp-watch' 'fldigi-alpha-watch' \
'fllog-alpha-watch' 'fllog-watch' 'flmsg-alpha-watch' 'flmsg-wath' \
'flnet-alpha-watch' 'flnet-watch' 'flrig-alpha-watch' 'flrig-watch' \
'flwkey-alpha-watch' 'flwkey-watch' 'flwrap-alpha-watch' 'flwrap-watch')

# setup foreground colours
C_R='\033[01;31m'	# red
C_G='\033[01;32m'	# green
C_Y='\033[01;33m'	# yellow
C_C='\033[01;36m'	# cyan
C_NC='\033[01;37m'	# no color

# set reasonable menu height & width.
echo -e "\e[8;35;110t"

################################################################################
# LANGUAGE SECTION
################################################################################

# backtitle lang
BACKTITLE="@PROGRAM@ @VERSION@"

# root chk lang
RCTITLE="ROOT / SUDO CHECK FAILED"
RCMSG="    @PROGRAM@ must be run as normal user, not root or sudo.\n\
          Please run "$0" without "sudo" prefix"

# dialog lang
DITITLE="DIALOG INSTALL"
DIMSG="        @PROGRAM@ Will now install Dialog Msg CLient"
DISUCTITLE="DIALOG INSTALL COMPLETE"
DISUCMSG="\n      Dialog Install Complete."

# sig catch lang
SIGCAUGHT="   SIGNAL CAUGHT"
SIGCAUGHTMSG="\n   Signal Caught, Performing Cleanup Routine"
CLEANTMP=" CLEANING TMP"
CLEANTMPMSG="\n         Cleaning Up Temporary Files"
RESETOPT=" RESET OPTIONS"
RESETOPTMSG="\n         Resetting Used Bash Options"
CLEANVAR=" CLEANING VARS"
CLEANVARMSG="\n             Unset Used Variables"

# exit lang
EXITWSDT=" EXIT @PROGRAM@"
EXITWSDTMSG="\n      Performing Shutdown Cleanup Routine"

# main menu lang
MMTITLE=" @PROGRAM@ MAIN MENU"
MENUMSG="            Key the letter then hit [ENTER]\n\
     Arrow Up/Dwn or '+' or '-' Keys to Navigate\n\n"

# help menu lang
HTITLE="APPLICATION BUILD HELP DOCUMENT"

# setup check lang
SETUPTITLE="  SETUP REQUIRED"
SETUPMSG="\n   In Order to use @PROGRAM@, you must first run setup.sh \n\
     Select 'OK' then at command prompt run: ./setup.sh\n"

# under development
UD=" UNDER DEVELOPMENT"
UDMSG="\n      Build Selection is Under Development"


################################################################################
# MENU SECTION
################################################################################

# main menu
touch "$TMPD/MMenu.tmp"
cat << 'EOF' > "$TMPD"/MMenu.tmp 
"1" "FLDIGI .. (devel)" \
"2" "FLAMP ... (devel)" \
"3" "FLMSG ... (devel)" \
"4" "FLRIG ... (devel)" \
"5" "FLWKEY .. (devel)" \
"6" "FLLOG ... (devel)" \
"7" "FLNET ... (devel)" \
"8" "FLWRAP .. (devel)" \
"V" "Check App Versions" \
"H" "Help" \
"E" "Exit"
EOF

# menu for linux builds
touch "$TMPD/BuildMenuNix.tmp"
cat << 'EOF' > "$TMPD/BuildMenuNix.tmp"
"1" "FLDIGI .. (devel)" \
"2" "FLAMP ... (devel)" \
"3" "FLMSG ... (devel)" \
"4" "FLRIG ... (devel)" \
"5" "FLWKEY .. (devel)" \
"6" "FLLOG ... (devel)" \
"7" "FLNET ... (devel)" \
"8" "FLWRAP .. (devel)" \
"V" "Check App Versions" \
"H" "Help" \
"E" "Exit"
EOF

# menu for MXE builds
touch "$TMPD/BuildMenuMxe.tmp"
cat << 'EOF' > "$TMPD/BuildMenuMxe.tmp"
"1" "FLDIGI .. (devel)" \
"2" "FLAMP ... (devel)" \
"3" "FLMSG ... (devel)" \
"4" "FLRIG ... (devel)" \
"5" "FLWKEY .. (devel)" \
"6" "FLLOG ... (devel)" \
"7" "FLNET ... (devel)" \
"8" "FLWRAP .. (devel)" \
"V" "Check App Versions" \
"H" "Help" \
"E" "Exit"
EOF

# menu admin menu
touch "$TMPD/MxeAdmin.tmp"
cat << 'EOF' > "$TMPD/MxeAdmin.tmp"
"1" "FLDIGI .. (devel)" \
"2" "FLAMP ... (devel)" \
"3" "FLMSG ... (devel)" \
"4" "FLRIG ... (devel)" \
"5" "FLWKEY .. (devel)" \
"6" "FLLOG ... (devel)" \
"7" "FLNET ... (devel)" \
"8" "FLWRAP .. (devel)" \
"V" "Check App Versions" \
"H" "Help" \
"E" "Exit"
EOF


################################################################################
# COMMON FUNCTIONS
################################################################################

#--set options------------------------------------------------------------------
set_options() {
set -e                 # exit immediately on any error
set -o pipefail        # pipeline fail return exit status
set -u                 # undefined variables
}

#--unset options----------------------------------------------------------------
unset_options() {
set +e
set +o pipefail
set +u
unset INSTALLD
}

#--under development------------------------------------------------------------
under_development() {

dialog --clear --backtitle "$BACKTITLE" --title "$UD" --msgbox "$UDMSG" 7 50

}

#--signal catch-----------------------------------------------------------------
sig_catch_cleanup() {
EXIT_STATUS="$?"

if [ "$EXIT_STATUS" == "0" ]
then
   clean_exit

else

dialog --backtitle "$BACKTITLE" --title "$SIGCAUGHT" --infobox "$SIGCAUGHTMSG" 5 50
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
	rm -r  "$TMPD"/*
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	clear

	echo "Exit Status [ $EXIT_STATUS ]"
	echo "@PROGRAM@ Signal Catch Cleanup Complete"
	echo ''
	trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
	unset exit_status
	exit
fi
}

#--root check-------------------------------------------------------------------
root_chk() {
MSGCLIENT=""
TESTD=$(dpkg --get-selections dialog | awk '{print $1}')

if [ "$TESTD" = "dialog" ]
then
   MSGCLIENT="dialog"
  else
   MSGCLIENT="whiptail"
fi
clear

if [ "$EUID" = "0" ]
then
"$MSGCLIENT" --title "$RCTITLE" --backtitle "$BACKTITLE" --msgbox "$RCMSG" 7 70
clean_exit
exit
fi
clear

unset {TESTVAR,MSGCLIENT}
}

#--dialog check-----------------------------------------------------------------
dialog_chk() {
INSTALLED=$(dialog --version |awk '{print $1}')

if [ "$INSTALLED" == "Version:" ]; then
   MSGCLIENT="dialog"

elif [ "$INSTALLED" != "dialog" ]; then
   MSGCLIENT="whiptail"
   clear

"$MSGCLIENT" --clear --title "$DITITLE" --backtitle "$BACKTITLE" --msgbox "$DIMSG" 7 70
   touch "$LOGD"/install_log
   sudo apt-get -qy install dialog | tee 2>> "$LOGD"/install_log
   wait
   dialog --create-rc ~/.dialogrc
   wait
   cp "$CONFIG"/debian.rc ~/.dialogrc
   wait
   clear

dialog --title "$DISUCTITLE" --backtitle "$BACKTITLE" --msgbox "$DISUCMSG" 7 40
sudo -k

fi
}

#--normal shutdown--------------------------------------------------------------
clean_exit() {
local EXIT_STATUS="$?"

dialog --backtitle "$BACKTITLE" --title "$EXITWSDT" --infobox "$EXITWSDTMSG" 5 50
   sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
   rm -r "$TMPD"/*
   wait
   sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	sleep 1
	clear
	echo "Exit Status [ $EXIT_STATUS ]"
	echo "@PROGRAM@ Clean Exit Complete."
	echo ''
	trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
	unset EXIT_STATUS
exit
}

#--dialog rc file---------------------------------------------------------------
make_dialogrc() {

rm -f "$TMPD/.dialogrc" &>/dev/null ; touch "$TMPD/.dialogrc"

(
cat <<'EOF_DIALOGRC'
aspect = 0
separate_widget = ""
tab_len = 0
visit_items = OFF
use_shadow = ON
use_colors = ON
screen_color = (CYAN,BLUE,ON)
shadow_color = (BLACK,BLACK,ON)
dialog_color = (BLACK,WHITE,OFF)
title_color = (BLUE,WHITE,ON)
border_color = (WHITE,WHITE,ON)
button_active_color = (WHITE,BLUE,ON)
button_inactive_color = (BLACK,WHITE,OFF)
button_key_active_color = (WHITE,BLUE,ON)
button_key_inactive_color = (RED,WHITE,OFF)
button_label_active_color = (YELLOW,BLUE,ON)
button_label_inactive_color = (BLACK,WHITE,ON)
inputbox_color = (BLACK,WHITE,OFF)
inputbox_border_color = (BLACK,WHITE,OFF)
searchbox_color = (BLACK,WHITE,OFF)
searchbox_title_color = (BLUE,WHITE,ON)
searchbox_border_color = (WHITE,WHITE,ON)
position_indicator_color = (BLUE,WHITE,ON)
menubox_color = (BLACK,WHITE,OFF)
menubox_border_color = (WHITE,WHITE,ON)
item_color = (BLACK,WHITE,OFF)
item_selected_color = (WHITE,BLUE,ON)
tag_color = (BLUE,WHITE,ON)
tag_selected_color = (YELLOW,BLUE,ON)
tag_key_color = (BLACK,WHITE,OFF)
tag_key_selected_color = (WHITE,BLUE,ON)
check_color = (BLACK,WHITE,OFF)
check_selected_color = (WHITE,BLUE,ON)
uarrow_color = (GREEN,WHITE,ON)
darrow_color = (GREEN,WHITE,ON)
itemhelp_color = (WHITE,BLACK,OFF)
form_active_text_color = (WHITE,BLUE,ON)
form_text_color = (WHITE,CYAN,ON)
form_item_readonly_color = (CYAN,WHITE,ON)
gauge_color = (BLUE,WHITE,ON)
EOF_DIALOGRC
) > "$TMPD/.dialogrc"

# use the new dialogrc
export DIALOGRC="$TMPD/.dialogrc"

}

################################################################################
# LINUX NATIVE FUNCTIONS
################################################################################

# main header-------------------------------------------------------------------
build_header() {
STEP='Main Header'
clear
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" STARTING BUILD for ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
echo ''
}

# git check---------------------------------------------------------------------
git_check() {
STEP='Git Phase'
if [ -f "$APP_SRC/configure.ac" ]; then
		if [ -f "$APP_SRC/Makefile" ]; then
			cd "$APP_SRC"
			echo 'Cleaning Repository Tree'
			make clean &>/dev/null
			make distclean &>/dev/null
			git clean -d -x -f &>/dev/null
		fi
	echo 'Performing Git Pull'
	cd "$APP_SRC"
	git pull
else
	echo 'Performing Git Clone'
	rm -rf "$APP_SRC" &>/dev/null
	cd "$SRCD"
	git clone --depth 1 git://git.code.sf.net/p/fldigi/$APP_NAME $APP_NAME
fi
echo ''
}

# get version fomr configure.ac------------------------------------------------
get_version() {
STEP='Get Version Information Phase'

# Example: From FLDIGI configure.ac 05-SEP-2015
# ------------------------------------------------------------------------------
# m4_define(FLLOG_MAJOR,  [3])
# m4_define(FLLOG_MINOR,  [22])
# m4_define(FLLOG_PATCH,  [.13])
# ------------------------------------------------------------------------------
echo '-----------------------------------------------------'
echo -e ${C_Y}" GET VERSION INFOMATION"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo "* Parsing [ configure.ac ]"
VFILE="$APP_SRC/configure.ac"
case "$APP_NAME" in 
	comptext)
		MAJOR=$(cat $VFILE |grep m4_define |grep comptext_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep comptext_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep comptext_PATCH |awk '{print $2}') ;;
	comptty)
		MAJOR=$(cat $VFILE |grep m4_define |grep comptty_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep comptty_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep comptty_PATCH |awk '{print $2}') ;;		
	flamp)
		MAJOR=$(cat $VFILE |grep m4_define |grep FLAMP_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep FLAMP_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep FLAMP_PATCH |awk '{print $2}') ;;
	fldigi)
		MAJOR=$(cat $VFILE |grep m4_define |grep FLDIGI_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep FLDIGI_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep FLDIGI_PATCH |awk '{print $2}') ;;
	fllog)
		MAJOR=$(cat $VFILE |grep m4_define |grep FLLOG_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep FLLOG_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep FLLOG_PATCH |awk '{print $2}') ;;
	flmsg)
		MAJOR=$(cat $VFILE |grep m4_define |grep FLMSG_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep FLMSG_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep FLMSG_PATCH |awk '{print $2}') ;;
	flnet)
		MAJOR=$(cat $VFILE |grep m4_define |grep flnet_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep flnet_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep flnet_PATCH |awk '{print $2}') ;;		
	flrig)
		MAJOR=$(cat $VFILE |grep m4_define |grep FLRIG_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep FLRIG_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep FLRIG_PATCH |awk '{print $2}') ;;
	flwkey)
		MAJOR=$(cat $VFILE |grep m4_define |grep FLWKEY_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep FLWKEY_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep FLWKEY_PATCH |awk '{print $2}') ;;
	flwrap)
		MAJOR=$(cat $VFILE |grep m4_define |grep FLWRAP_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep FLWRAP_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep FLWRAP_PATCH |awk '{print $2}') ;;				
	linsimp)
		MAJOR=$(cat $VFILE |grep m4_define |grep LINSIM_MAJOR |awk '{print $2}' |cut -c2)
		MINOR=$(cat $VFILE |grep m4_define |grep LINSIM_MINOR |awk '{print $2}' |cut -c2)
		RAW=$(cat $VFILE |grep m4_define |grep LINSIM_PATCH |awk '{print $2}') ;;
	*) ;;
esac

PATCH=${RAW:2:-2}
BUILDV="$MAJOR.$MINOR.$PATCH"
echo "* Build Version Is ..: $BUILDV"
}

# configure header--------------------------------------------------------------
configure_header() {
STEP='Autoreconf Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CONFIGURING"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$APP_SRC"

# patch for FLLOG missing pkg-config.m4
if [ "$APP_NAME" = "fllog" ] ; then
	if [ ! -f "$APP_SRC/m4/pkg-config.m4" ] ; then
		cp -u $PATCHD/$APP_NAME/pkg-config.m4 "$APP_SRC/m4/"
	fi
fi
# end patch

echo '* Running Autoreconf to generate configure and Makefile'
autoreconf -f -i
echo ''
}

# setup the install directory---------------------------------------------------
set_installd() {

# set the install directory based on --enable-separate ( enabled by default )
if [ "$SEPARATE" = "Yes" ]; then
	INSTALLD="$HOMEDIR/$APP_NAME/$BUILDV"
else
	INSTALLD="$HOMEDIR/$APP_NAME/install"
fi

}

# default configure(s)----------------------------------------------------------
default_configure() {
STEP='Configure Phase'

case "$APP_NAME" in
	comptext|comptty|fldigi|flamp|fllog|flmsg|flnet|flrig|flwkey|flwrap|linsim)
		case "$HOST_CPU" in
			*arm* )
				./configure --prefix="$INSTALLD" --enable-static \
				CC='gcc' \
				CXX='g++' \
				CFLAGS='-O2 -mfpu=vfp -mfloat-abi=hard -ffast-math -finline-functions' \
				CXXFLAGS="$CFLAGS"
			;;
			* )
				./configure --prefix="$INSTALLD" --enable-optimizations=native --enable-static
			;;
		esac
	;;
	*) # TO-DO: add some warning message here if the wrong applications is selected somehow
	;;
esac
}

# default make invocation-------------------------------------------------------
default_make() {
STEP='Make Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BUILDING"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo -e "* Build Type: "${C_G}'Static'${C_NC}
echo ''
make -j$JJ
}


# default install---------------------------------------------------------------
default_install() {
STEP='Install Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" INSTALLING BINARIES"${C_NC}
echo '-----------------------------------------------------'
echo ''
make install-strip
}

# get version info from config.log----------------------------------------------
default_version() {
STEP='Get Version Info Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" GENERATE VERSION MARKER"${C_NC}
echo '-----------------------------------------------------'
echo ''
case "$APP_NAME" in 
	comptext)
		RELEASE=$(grep 'comptext_VERSION =' < Makefile |awk '{print $3}') ;;
	comptty)
		RELEASE=$(grep 'comptext_VERSION =' < Makefile |awk '{print $3}') ;;		
	fldigi)
		RELEASE=$(grep 'FLDIGI_VERSION =' < Makefile |awk '{print $3}') ;;
	flamp)
		RELEASE=$(grep 'FLAMP_VERSION =' < Makefile |awk '{print $3}') ;;
	fllog)
		RELEASE=$(grep 'FLLOG_VERSION =' < Makefile |awk '{print $3}') ;;
	flmsg)
		RELEASE=$(grep 'FLMSG_VERSION =' < Makefile |awk '{print $3}') ;;
	flnet)
		RELEASE=$(grep 'flnet_VERSION =' < Makefile |awk '{print $3}') ;;
	flrig)
		RELEASE=$(grep 'FLRIG_VERSION =' < Makefile |awk '{print $3}') ;;
	flwkey)
		RELEASE=$(grep 'FLWKEY_VERSION =' < Makefile |awk '{print $3}') ;;
	flwrap)
		RELEASE=$(grep 'FLWRAP_VERSION =' < Makefile |awk '{print $3}') ;;
	linsim)
		RELEASE=$(grep 'LINSIM_VERSION =' < Makefile |awk '{print $3}') ;;
	*) ;;
esac
echo "* Created version marker for: $APP_NAME-$RELEASE"
}

# build_log_copy----------------------------------------------------------------
copy_build_logs() {
STEP='Copy Build Log Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" COPY LOG FILES ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo "* Copied config.log, Makefile to: $INSTALLD"
cp -u "$SRCD/$APP_NAME"/{config.log,Makefile} "$INSTALLD"
}

# install marker----------------------------------------------------------------
install_marker() {
STEP='Install Marker'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" GENERATING MARKERS"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo '* Removing old markear'
rm -f "$INSTALLD/version.mkr" &>/dev/null
rm -f "$MKRD/$APP_NAME-version.mkr" &>/dev/null
echo '* Installing new version markers'
echo $RELEASE > "$INSTALLD/$APP_NAME-version.mkr"
echo $RELEASE > "$MKRD/$APP_NAME-version.mkr"
}

# change ownership--------------------------------------------------------------
change_ownership() {
STEP='Change Ownership Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" VERIFY OWNERSHIP"${C_NC}
echo '-----------------------------------------------------'
echo ''
chown -R "$LOGNAME":"$LOGGRP" "$HOMEDIR/$APP_NAME"
echo "* Updated ownership to [ $LOGNAME ]"
}

# clean the build tree----------------------------------------------------------
clean_after_build() {
STEP='Clean Build Tree'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CLEANING BUILD TREE"${C_NC}
echo '-----------------------------------------------------'
echo ''
make clean &>/dev/null
echo '* Ran make clean'
make distclean &>/dev/null
git clean -qfd
echo '* Ran git clean'
}

# finish build message---------------------------------------------------------
build_summary() {
STEP='Finish Build Message'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_G}" BUILD SUMMARY"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo -e ' Link Config ..: '${C_G}"$LINK_TYPE"${C_NC}
echo " Version ......: $APP_NAME-$RELEASE"
echo " Source .......: $APP_SRC"
echo " Install ......: $INSTALLD"
echo ''
echo " TO RUN $APP_NAME"
echo " Type, ........: cd $INSTALLD/bin"
echo " Type, ........: ./$APP_NAME"
echo ''
cd "$HOMEDIR"
read -p "Press [ Enter ] to continue.."

}


################################################################################
#
# VERSION FUNCTION
#
################################################################################

# NOTE: Where possible, all functions are in order of use to provide as much
# clarity as possible / feasable

# version check header----------------------------------------------------------
version_check() {
clear
echo '-----------------------------'
echo -e ${C_Y}'CHECKING VERSION INFORMATION'${C_NC}
echo '-----------------------------'
echo ''
mkdir -p "$TMPD"
rm -f "$VERLOG"

# check for uscan
uscan --version > /dev/null 2>&1 && echo -e "* Uscan ........ ${C_G}✔${C_NC}" || {
	clear
	echo ''
	echo 'You must have *uscan* from the Debian devscripts'
	echo 'package installed in order to perform version checks.'
	echo ''
	echo 'Due to the number of packages involed with devscripts,'
	echo 'it is not installed as part of the default FLSDK install.'
	echo 'As such, the installation is up to the user to perform.'
	echo ''
	echo 'There are many useful tools included with the package.'
	echo 'It is highly advisable to install it. From a frsh distro'
	echo 'stanpoint, total disk usage is only 3MB after install.'
	echo ''
	echo 'For Debian, Ubuntu and Mint, install with:'
	echo ''
	echo 'sudo apt-get devscripts'
	echo ''
	echo ''
	continue
	}

# check Internet connectivity---------------------------------------------------
((ping -w5 -c3 www.w1hkj.com || ping -w5 -c3 8.8.8.8 || ping -w5 -c3 208.67.222.222) > /dev/null 2>&1) && \
	echo -e "* Internet ..... ${C_G}✔${C_NC}" || {
	echo ''
	echo -e ${C_R}'** INTERNET CONNECTION FAILURE**'${C_NC}
	echo ''
	echo 'You must have internet access inorder to'
	echo 'perform version checks. The following'
	echo 'test failed:'
	echo ''
	echo 'ping -w5 -c3 www.w1hkj.com || ping -w5 -c3 8.8.8.8 || ping -w5 -c3 208.67.222.222'
	echo ''
	echo 'FLDIG Website ...: www.w1hkj.com'
	echo 'Google DNS ......: 8.8.8.8'
	echo 'OpenDNS .........: 208.67.222.222'
	echo ''
	echo 'Check you can access the internet, resolve any connection'
	echo "problems, then re-run Check Version"
	echo ''
	read -p "Press [ Enter ] to continue ..."
	exit 1
	}

# check if we can access SourceForge repositories-------------------------------
((git ls-remote git://git.code.sf.net/p/fldigi/fldigi HEAD) > /dev/null 2>&1) && \
	echo -e "* Sourceforge .. ${C_G}✔${C_NC}" || {
	echo ''
	echo -e ${C_R}'** SOURCEFORGE CONNECTION FAILURE**'${C_NC}
	echo ''
	echo '@PROGRAM@ was unable to check the Git repository'
	echo 'on Sourceforge. This may be a temporary fault or'
	echo 'you may have internet connections issues.'
	echo ''
	echo 'If the problems presists, check that you can browse to the'
	echo 'Git Repo on SF, and chek their Net Operations messages on'
	echo 'on Twitter'
	echo ''
	read -p "Press [ Enter ] to continue ..."
	exit 1
	}

# add message header to file----------------------------------------------------
echo "APPLICATION RELEASE ALPHA LOCAL-BUILD" > "$VERLOG"
echo '----------- ------- ----- -----------' >> "$VERLOG"


# FLDIGI version check----------------------------------------------------------
APP_NAME='fldigi'

fldigi=$(uscan --watchfile @WATCHD@/fldigi-watch --package flmsg --upstream-version 0 --report |grep 'tar.gz')
fldigi_release=$(echo ${fldigi##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{7}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/fldigi-alpha-watch --package fldigi --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	fldigia=$(uscan --watchfile @WATCHD@/fldigi-alpha-watch --package fldigi --upstream-version 0 --report |grep 'tar.gz')
	fldigi_alpha=$(echo ${fldigia##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{7}//')
else
	fldigi_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLDIGI $fldigi_release $fldigi_alpha $buildv" >> "$VERLOG"
echo -e "* FLDIGI ....... ${C_G}$CHK${C_NC}"


# FLAMP version info------------------------------------------------------------
APP_NAME='flamp'

flamp=$(uscan --watchfile @WATCHD@/flamp-watch --package flmsg --upstream-version 0 --report |grep 'tar.gz')
flamp_release=$(echo ${flamp##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/flamp-alpha-watch --package flamp --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	flampa=$(uscan --watchfile @WATCHD@/flamp-alpha-watch --package flamp --upstream-version 0 --report |grep 'tar.gz')
	flamp_alpha=$(echo ${flampa##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')
else
	flamp_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLAMP $flamp_release $flamp_alpha $buildv" >> "$VERLOG"
echo -e "* FLAMP ........ ${C_G}$CHK${C_NC}"


# FLMSG version info------------------------------------------------------------
APP_NAME='flmsg'

flmsg=$(uscan --watchfile @WATCHD@/flmsg-watch --package flmsg --upstream-version 0 --report |grep 'tar.gz')
flmsg_release=$(echo ${flmsg##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/flmsg-alpha-watch --package flmsg --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	flmsga=$(uscan --watchfile @WATCHD@/flmsg-alpha-watch --package flmsg --upstream-version 0 --report |grep 'tar.gz')
	flmsg_alpha=$(echo ${flmsga##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')
else
	flmsg_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLMSG $flmsg_release $flmsg_alpha $buildv" >> "$VERLOG"
echo -e "* FLMSG ........ ${C_G}$CHK${C_NC}"


# FLRIG version info------------------------------------------------------------
APP_NAME='flrig'

flrig=$(uscan --watchfile @WATCHD@/flrig-watch --package flrig --upstream-version 0 --report |grep 'tar.gz')
flrig_release=$(echo ${flrig##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/flrig-alpha-watch --package flrig --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	flriga=$(uscan --watchfile @WATCHD@/flrig-alpha-watch --package flrig --upstream-version 0 --report |grep 'tar.gz')
	flrig_alpha=$(echo ${flriga##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')
else
	flrig_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLRIG $flrig_release $flrig_alpha $buildv" >> "$VERLOG"
echo -e "* FLRIG ........ ${C_G}$CHK${C_NC}"


# FLWKEY version info-----------------------------------------------------------
APP_NAME='flwkey'

flwkey=$(uscan --watchfile @WATCHD@/flwkey-watch --package flwkey --upstream-version 0 --report |grep 'tar.gz')
flwkey_release=$(echo ${flwkey##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{7}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/flwkey-alpha-watch --package flwkey --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	flwkeya=$(uscan --watchfile @WATCHD@/flwkey-alpha-watch --package flwkey --upstream-version 0 --report |grep 'tar.gz')
	flwkey_alpha=$(echo ${flwkeya##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{7}//')
else
	flwkey_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLWKEY $flwkey_release $flwkey_alpha $buildv" >> "$VERLOG"
echo -e "* FLWKEY ....... ${C_G}$CHK${C_NC}"


# FLWRAP version info-----------------------------------------------------------
APP_NAME='flwrap'

flwrap=$(uscan --watchfile @WATCHD@/flwrap-watch --package flwrap --upstream-version 0 --report |grep 'tar.gz')
flwrap_release=$(echo ${flwrap##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{7}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/flwrap-alpha-watch --package flwrap --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	flwrapa=$(uscan --watchfile @WATCHD@/flwrap-alpha-watch --package flwrap --upstream-version 0 --report |grep 'tar.gz')
	flwrap_alpha=$(echo ${flampa##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')
else
	flwrap_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLWRAP $flwrap_release $flwrap_alpha $buildv" >> "$VERLOG"
echo -e "* FLWRAP ....... ${C_G}$CHK${C_NC}"


# FLLOG version info -----------------------------------------------------------
APP_NAME='fllog'

fllog=$(uscan --watchfile @WATCHD@/fllog-watch --package fllog --upstream-version 0 --report |grep 'tar.gz')
fllog_release=$(echo ${fllog##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/fllog-alpha-watch --package fllog --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	flloga=$(uscan --watchfile @WATCHD@/fllog-alpha-watch --package fllog --upstream-version 0 --report |grep 'tar.gz')
	fllog_alpha=$(echo ${flloga##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')
else
	fllog_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLLOG $fllog_release $fllog_alpha $buildv" >> "$VERLOG"
echo -e "* FLLOG ........ ${C_G}$CHK${C_NC}"


# FLNET version info -----------------------------------------------------------
APP_NAME='flnet'

flnet=$(uscan --watchfile @WATCHD@/flnet-watch --package flnet --upstream-version 0 --report |grep 'tar.gz')
flnet_release=$(echo ${flnet##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')

# Check Alpha builds
if $(uscan --watchfile @WATCHD@/flnet-alpha-watch --package flnet --upstream-version 0 --report > /dev/null 2>&1) ; [[ "$?" == "0" ]]; then
	flneta=$(uscan --watchfile flnet-alpha-watch --package flnet --upstream-version 0 --report |grep 'tar.gz')
	flnet_alpha=$(echo ${flneta##*/} | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//' |sed -r 's/^.{6}//')
else
	flnet_alpha="$NONE"
fi

# look for install mkr, set with the build script
if [ -s "$MKRD/$APP_NAME-version.mkr" ] ; then
	buildv=$(awk -F\| '{print $1}' < $MKRD/$APP_NAME-version.mkr)
else
	buildv="$NONE"
fi

echo "FLNET $flnet_release $flnet_alpha $buildv" >> "$VERLOG"
echo -e "* FLNET ........ ${C_G}$CHK${C_NC}"

# display version check results-------------------------------------------------
echo ''
cat "$VERLOG" |column -t
echo ''
echo -e "✘ - In ALPHA = A tar.gz file was not found at www.w1hkj.com"
echo -e "✘ - In LOCAL-BUILD = You have not built the application"
echo ''
read -p "Press [ Enter ] to continue ..."

}

################################################################################
#
# Start Main Script
#
################################################################################

# set traps
trap sig_catch_cleanup SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP

# set shell options
set_options

# root check
root_chk

# dialog check
dialog_chk

# generate dialog rc
make_dialogrc

# menu help files
HELP="$DOCS/main_menu_help.txt"

# MAIN MANU --------------------------------------------------------------------
while [ 0 ]; do

dialog --clear --ok-label SELECT --nocancel --clear --backtitle "$BACKTITLE" --title \
"$MMTITLE" --menu "$MENUMSG" 19 62 20 --file "$TMPD/MMenu.tmp" 2> "$TMPD/selection"

MMSELECT=$(head -c 1 < "$TMPD"/selection)

# FLDIGI -----------------------------------------------------------------------
if [ "$MMSELECT" = "1" ]; then
	APP_NAME='fldigi'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue

# FLAMP ------------------------------------------------------------------------
elif [ "$MMSELECT" = "2" ]; then
	APP_NAME='flamp'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue

# FLMSG ------------------------------------------------------------------------
elif [ "$MMSELECT" = "3" ]; then
	APP_NAME='flmsg'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue

# FLRIG Menu--------------------------------------------------------------------
elif [ "$MMSELECT" = "4" ]; then
	APP_NAME='flrig'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue

# FLWKEY Menu--------------------------------------------------------------------
elif [ "$MMSELECT" = "5" ]; then
	APP_NAME='flwkey'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue

# FLLOG Menu--------------------------------------------------------------------
elif [ "$MMSELECT" = "6" ]; then
	APP_NAME='fllog'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue

# FLNET Menu--------------------------------------------------------------------
elif [ "$MMSELECT" = "7" ]; then
	APP_NAME='flnet'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue
	
# FLWRAP Menu-------------------------------------------------------------------
elif [ "$MMSELECT" = "8" ]; then
	APP_NAME='flwrap'
	APP_SRC="$SRCD/$APP_NAME"
	LINK_TYPE='Static'
	for f in ${default_build_array[@]} ; do "$f" ; done
	continue

# Version Check-----------------------------------------------------------------
elif [ "$MMSELECT" = "V" ]; then
	version_check
	continue

# Help File---------------------------------------------------------------------
   elif [ "$MMSELECT" = "H" ]; then
dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$HTITLE" --textbox "$HELP" 20 80
	continue

# Exit FLSDK----------------------------------------------------------------
  elif [ "$MMSELECT" = "E" ]; then
   clean_exit
fi

done
