#!/usr/bin/env bash
#
# Name..........: @PROGRAM@ @VERSION@
# Execution.....: As normal user type: flsdk
# Copyright.....: @COPYRIGHT@
# License.......: @LICENSE@
# Contributors..: @AUTHORS@
# Comment.......: Part of the @PROGRAM@ Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------------#

# Main Feature Planned Updates
# TO-DO: v0.0.6 - Add option menus / functions to build both Release & Alpha
# TO-DO: v0.0.6 - Add M4 macro to test for sse, sse3, sse4 options
# TO-DO: v0.0.6 - Add custom Git repository location option .. origin/xyz
# TO-DO: v0.0.6 - Add command line options using getopts
# TO-DO: v0.0.6 - Add Add dynamic menu generation for Aplha testing builds

# script options
BUILD_TYPE="Native"
SEPARATE=@SEPARATE@
JJ=@JJJJ@
J2="2"
MXEURL="https://github.com/mxe/mxe.git"
# host and distribution information
HOST_OS="@HOST_OS@"
HOST_CPU="@HOST_CPU@"
DISTROSI="@DISTROSI@"
DISTROSD="@DISTROSD@"
DISTROSR="@DISTROSR@"
DISTROSC="@DISTROSC@"

# uname information
KERNEL="@KERNEL@"
NODENAME="@NODENAME@"
KRELEASE="@KRELEASE@"
KVERSION="@KVERSION@"
PROCESSOR="@PROCESSOR@"
SUBSYSTEM="@SUBSYSTEM@"

# directories and paths variables
ORIG_PATH="$PATH"
HOMEDIR=~/flsdk
FLSDKDB=~/flsdk/flsdk.db
LOGD="$HOMEDIR/logs"
MKRD="$HOMEDIR/mkrd"
MKRDMXE="$HOMEDIR/mkrdmxe"
MXED="$HOMEDIR/mxe"
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
VERLOG="$TMPD/ver.tmp"
WIN32="$HOMEDIR/win32"
LINUX="$HOMEDIR/linux"
WSL="/mnt/c/FLSDK"

# system directories
DOCS="@DOCDIR@"

# general purpose variables
CHK=${C_G}OK${C_NC}
NONE=' - '

# setup foreground colours
# TO-DO: v0.0.6 - Convert colors to tput for improved compatability
C_R='\033[01;31m'   # red
C_G='\033[01;32m'   # green
C_Y='\033[01;33m'   # yellow
C_C='\033[01;36m'   # cyan
C_NC='\033[01;37m'  # no color

# application list array
app_array=(
    'comptext'
    'comptty'
    'flamp'
    'fldigi'
    'flmsg'
    'fllog'
    'flnet'
    'flrig'
    'flwkey'
    'flwrap'
    'linsim'
)

# flsdk-wsl meta package should deal with most of this
linux_sys_pkg_array=(
    'autoconf'
    'automake'
    'autopoint'
    'bison'
    'bzip2'
    'flex'
    'g++'
    'gettext'
    'git'
    'g++-multilib'
    'gperf'
    'httping'
    'intltool'
    'libc6-dev-i386'
    'libffi-dev'
    'libfltk1.3-dev'
    'libcairo2-dev'
    'libjpeg-dev'
    'libxft-dev'
    'libxinerama-dev'
    'libgdk-pixbuf2.0-dev'
    'libltdl-dev'
    'libssl-dev'
    'libtool'
    'libxml-parser-perl'
    'lsb-release'
    'make'
    'nsis'
    'openssl'
    'p7zip-full'
    'patch'
    'perl'
    'pkg-config'
    'python3-requests'
    'python3-bs4'
    'python3-lxml'
    'ruby'
    'scons'
    'sqlite3'
    'unzip'
    'wget'
    'xz-utils'
)
# add libtool-bin if distro version is 15 or greater
if (($(echo "$(lsb_release -sr) >= 15" | bc -l))); then
    linux_sys_pkg_array+=('libtool-bin')
fi

# mxe build list, required to build FLDIGI applications
mxe_pkg_array=(
    'gcc'
    'boost'
    'gdb'
    'gettext'
    'glib'
    'gnutls'
    'jpeg'    
    'libpng'
    'libsamplerate'
    'libsndfile'
    'portaudio'
    'pthreads'
    'fltk'
    'hamlib'
)

# make sure all directories exist
# for Linux, mxe installers go to.......: $WIN32/<appname>
# for Win-10 WSL, mxe installers go to..: C:\FLSDK\<app-name>
mkdir -p "$HOMEDIR"/{logs,mkrd,mkrdmxe,src,tmp,win32,linux}
for a in "${app_array[@]}"
do
    if [[ $NODENAME == "WIN-10" ]]; then
        mkdir -p "/mnt/c/FLSDK/$a"
    else
        mkdir -p "$WIN32/$a"
        mkdir -p "$LINUX/$a"
    fi
done

# set reasonable menu height & width.
echo -e "\e[8;40;120t"

################################################################################
# LANGUAGE SECTION
################################################################################

# backtitle lang
BACKTITLE="@PROGRAM@ @VERSION@"

# root chk lang
RCTITLE="ROOT / SUDO CHECK FAILED"
RCMSG="    @PROGRAM@ must be run as normal user, not root or sudo.\n\
          Please run "$0" without "sudo" prefix"

# dialog lang
DITITLE="DIALOG INSTALL"
DIMSG="        @PROGRAM@ Will now install Dialog Msg CLient"
DISUCTITLE="DIALOG INSTALL COMPLETE"
DISUCMSG="\n      Dialog Install Complete."

# sig catch lang
SIGCAUGHT="   SIGNAL CAUGHT"
SIGCAUGHTMSG="\n   Signal Caught, Performing Cleanup Routine"
CLEANTMP=" CLEANING TMP"
CLEANTMPMSG="\n         Cleaning Up Temporary Files"
RESETOPT=" RESET OPTIONS"
RESETOPTMSG="\n         Resetting Used Bash Options"
CLEANVAR=" CLEANING VARS"
CLEANVARMSG="\n             Unset Used Variables"

# exit lang
EXITWSDT=" EXIT @PROGRAM@"
EXITWSDTMSG="\n      Performing Shutdown Cleanup Routine"

# main menu lang
MMTITLE=" @PROGRAM@ MAIN MENU"
LNTITLE=" @PROGRAM@ LINUX MENU"
WSLTITLE="  @PROGRAM@ WIN-10 WSL MENU"

# Linux release menu message  ( linux_build_selection() )
RELMSG="   LINUX NATIVE BUILD SELECTION"

# MXE build selection
MXEBLDMSG=" MXE BUILD SELECTION"

# MXE cross setup menu
MXESETUPMSG=" MXE SETUP MENU"

# menu navigation message
MENUMSG="          Key the letter then hit [ENTER]\n\
    Arrow Up/Dwn or '+' or '-' Keys to Navigate\n\n"

# help menu lang
HTITLE="APPLICATION BUILD HELP DOCUMENT"

# setup check lang
SETUPTITLE="  SETUP REQUIRED"
SETUPMSG="\n   In Order to use @PROGRAM@, you must first run setup.sh \n\
     Select 'OK' then at command prompt run: ./setup.sh\n"

# under development
UD=" UNDER DEVELOPMENT"
UDMSG="\n      Build Selection is Under Development"


###############################################################################
# FLSDK RELATED FUNCTIONS
###############################################################################

# set options------------------------------------------------------------------
set_options() {
    set -e                 # exit immediately on any error
    set -o pipefail        # pipeline fail return exit status
    set -u                 # undefined variables
}

# unset options----------------------------------------------------------------
unset_options() {
    set +e
    set +o pipefail
    set +u
    unset INSTALLD
}

# under development------------------------------------------------------------
under_development() {

dialog --clear --backtitle "$BACKTITLE" --title "$UD" --msgbox "$UDMSG" 7 50

}

# signal catch-----------------------------------------------------------------
sig_catch_cleanup() {
    EXIT_STATUS="$?"

    if [ "$EXIT_STATUS" == "0" ]
    then
       clean_exit
    else
    dialog --backtitle "$BACKTITLE" --title "$SIGCAUGHT" --infobox "$SIGCAUGHTMSG" 5 50
        sleep .4
    dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
        rm -rf  "$TMPD"/*
        sleep .4
    dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
        unset_options
        wait
        clear ||:
        echo "Exit Status [ $EXIT_STATUS ]"
        echo "@PROGRAM@ Signal Catch Cleanup Complete"
        echo ''
        trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
        unset exit_status
        exit
    fi
    
    # unset MXE env variables
    mxe_unset_env_variables
}

# root check-------------------------------------------------------------------
root_chk() {
    MSGCLIENT=""
    TESTD=$(dpkg --get-selections dialog | awk '{print $1}')

    if [ "$TESTD" = "dialog" ]; then
       MSGCLIENT="dialog"
    else
        MSGCLIENT="whiptail"
    fi

    clear ||:
    if [ "$EUID" = "0" ]; then
        "$MSGCLIENT" --title "$RCTITLE" --backtitle "$BACKTITLE" --msgbox "$RCMSG" 7 70
        clean_exit
        exit
    fi
    clear ||:
    unset {TESTVAR,MSGCLIENT}
}

# dialog check-----------------------------------------------------------------
dialog_chk() {

    INSTALLED=$(dialog --version |awk '{print $1}')
    if [ "$INSTALLED" == "Version:" ]; then
        MSGCLIENT="dialog"
    elif [ "$INSTALLED" != "dialog" ]; then
        MSGCLIENT="whiptail"
        clear ||:
        "$MSGCLIENT" --clear --title "$DITITLE" --backtitle "$BACKTITLE" --msgbox "$DIMSG" 7 70
        touch "$LOGD"/install_log
        sudo apt-get -qy install dialog | tee 2>> "$LOGD"/install_log
        wait
        dialog --create-rc ~/.dialogrc
        wait
        cp "$CONFIG"/debian.rc ~/.dialogrc
        wait
        clear ||:
        dialog --title "$DISUCTITLE" --backtitle "$BACKTITLE" --msgbox "$DISUCMSG" 7 40
        sudo -k
    fi
}

# normal shutdown--------------------------------------------------------------
clean_exit() {
    local EXIT_STATUS="$?"

    dialog --backtitle "$BACKTITLE" --title "$EXITWSDT" --infobox "$EXITWSDTMSG" 5 50
       sleep .4

    dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
       rm -rf "$TMPD"/*
       wait
       sleep .4

    dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
        unset_options
        wait
        sleep .4
        clear ||:
        echo "Exit Status [ $EXIT_STATUS ]"
        echo "@PROGRAM@ Clean Exit Complete."
        echo ''
        trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
        unset EXIT_STATUS

    # unset MXE env variables
    mxe_unset_env_variables

    exit
}

# dialog rc file---------------------------------------------------------------
make_dialogrc() {

rm -f "$TMPD/.dialogrc" &>/dev/null ; touch "$TMPD/.dialogrc"

(
cat <<'EOF_DIALOGRC'
aspect = 0
border_color = (WHITE,WHITE,ON)
button_active_color = (WHITE,BLUE,ON)
button_inactive_color = (BLACK,WHITE,OFF)
button_key_active_color = (WHITE,BLUE,ON)
button_key_inactive_color = (RED,WHITE,OFF)
button_label_active_color = (YELLOW,BLUE,ON)
button_label_inactive_color = (BLACK,WHITE,ON)
check_color = (BLACK,WHITE,OFF)
check_selected_color = (WHITE,BLUE,ON)
darrow_color = (GREEN,WHITE,ON)
dialog_color = (BLACK,WHITE,OFF)
form_active_text_color = (WHITE,BLUE,ON)
form_item_readonly_color = (CYAN,WHITE,ON)
form_text_color = (WHITE,CYAN,ON)
gauge_color = (BLUE,WHITE,ON)
inputbox_border_color = (BLACK,WHITE,OFF)
inputbox_color = (BLACK,WHITE,OFF)
item_color = (BLACK,WHITE,OFF)
itemhelp_color = (YELLOW,BLACK,OFF)
item_selected_color = (YELLOW,BLACK,ON)
menubox_border_color = (WHITE,WHITE,ON)
menubox_color = (BLACK,WHITE,OFF)
position_indicator_color = (BLUE,WHITE,ON)
screen_color = (CYAN,BLUE,ON)
searchbox_border_color = (WHITE,WHITE,ON)
searchbox_color = (BLACK,WHITE,OFF)
searchbox_title_color = (BLUE,WHITE,ON)
separate_widget = ""
shadow_color = (BLACK,BLACK,ON)
tab_len = 2
tag_color = (BLACK,WHITE,ON)
tag_key_color = (BLACK,WHITE,ON)
tag_key_selected_color = (YELLOW,BLACK,ON)
tag_selected_color = (YELLOW,BLACK,ON)
title_color = (BLUE,WHITE,ON)
uarrow_color = (RED,WHITE,ON)
use_colors = ON
use_shadow = ON
visit_items = OFF
EOF_DIALOGRC
) > "$TMPD/.dialogrc"

# use the new dialogrc
export DIALOGRC="$TMPD/.dialogrc"

}

# version check header---------------------------------------------------------
version_check() {
    clear ||:
    echo '-----------------------------------------------------'
    echo -e ${C_G}"FLSDK Application Version Check"${C_NC}
    echo '-----------------------------------------------------'

# check Internet connectivity--------------------------------------------------
((httping -t5 -c3 w1hkj.com || ping -t5 -c3 google.com || httping -t5 -c3 opendns.com) > /dev/null 2>&1) && \
    echo -e "* Internet ..... ${C_G}OK${C_NC}" || {
    echo ''
    echo -e ${C_R}'** INTERNET CONNECTION FAILURE**'${C_NC}
    echo ''
    echo 'You must have internet access inorder to'
    echo 'perform version checks. The following'
    echo 'test failed:'
    echo ''
    echo 'httping -t5 -c3 w1hkj.com || httping -t5 -c3 google.com || ping -t5 -c3 opendns.com'
    echo ''
    echo 'FLDIG Website ...: w1hkj.com'
    echo 'Google DNS ......: google.com'
    echo 'OpenDNS .........: opendns.com'
    echo ''
    echo 'Check you can access the internet, resolve any connection'
    echo "problems, then re-run Check Version"
    echo ''
    read_pause
    exit 1
    }

# check if we can access SourceForge repositories------------------------------
((git ls-remote git://git.code.sf.net/p/fldigi/fldigi HEAD) > /dev/null 2>&1) && \
    echo -e "* Sourceforge .. ${C_G}OK${C_NC}" || {
    echo ''
    echo -e ${C_R}'** SOURCEFORGE CONNECTION FAILURE**'${C_NC}
    echo ''
    echo '@PROGRAM@ was unable to check the Git repository'
    echo 'on Sourceforge. This may be a temporary fault or'
    echo 'you may have internet connections issues.'
    echo ''
    echo 'If the problems presists, check that you can browse to the'
    echo 'Git Repo on SF, and chek their Net Operations messages on'
    echo 'on Twitter'
    echo ''
    read_pause
    exit 1
    }

    # remove table.txt
    rm -f "$TMPD/table.txt"
    
    # now simply call the Python Script:
    @PYTHON3@ @BINDIR@/flsdk-version
    if [[ $NODENAME = "WIN-10" ]]; then
        COLUMNS='NAME, ALPHA, RELEASED, MXE'
        SEPERATOR='--------------------------------------------'
    else
        COLUMNS='NAME, ALPHA, RELEASED, MXE, LINUX'
        SEPERATOR='-----------------------------------------------------------'
    fi

    # run the query
    sqlite3 -header -column -nullvalue '-' "$FLSDKDB" \
    "SELECT $COLUMNS from VER ORDER by NAME ASC" >> "$TMPD/table.txt"
    
    # print echo the header and data
    echo -e ${C_G}
    head -n 1 $TMPD/table.txt
    echo -e ${C_NC}$SEPERATOR
    tail -n +3 $TMPD/table.txt

    # pause after the python script finishes
    echo ''
    read -p "Press [ Enter ] to continue ..."

}

# simple pause function--------------------------------------------------------
read_pause() {
    read -p "Press [ Enter ] to continue..."
}

###############################################################################
# LINUX / WSL/ MXE BUILD FUNCTIONS
###############################################################################

# main header------------------------------------------------------------------
build_header() {
    clear ||:
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" STARTING BUILD for ( $APP_NAME $BUILD_TYPE )"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
}

# git check--------------------------------------------------------------------
git_check() {
# TO-DO v0.0.5 - Add Global option to skip updates

    if [[ -f $APP_SRC/configure.ac ]]; then
        if [[ -f $APP_SRC/Makefile ]]; then
            cd "$APP_SRC"
            echo '*Cleaning Repository Tree'
            make clean &>/dev/null
            make distclean &>/dev/null
            git clean -d -x -f &>/dev/null
        fi
        cd "$APP_SRC"
        echo "Git fetch --all branches"
        git fetch --all
        echo "Git reset --hard origin/master"
        git reset --hard origin/master
        echo 'Git pull'
        git pull
    else
        echo 'Performing Git Clone'
        rm -rf "$APP_SRC" &>/dev/null
        cd "$SRCD"
        git clone git://git.code.sf.net/p/fldigi/$APP_NAME $APP_NAME
    fi
    echo ''
}

# get version from configure.ac------------------------------------------------
get_version() {

    # Example: From FLDIGI configure.ac 05-SEP-2015
    # -------------------------------------------------------------------------
    # m4_define(FLLOG_MAJOR,  [3])
    # m4_define(FLLOG_MINOR,  [22])
    # m4_define(FLLOG_PATCH,  [.13])
    # -------------------------------------------------------------------------
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" GET VERSION INFOMATION"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    echo "* Parsing [ configure.ac ]"
    VFILE="$APP_SRC/configure.ac"
    case "$APP_NAME" in 
        comptext)
            MAJOR=$(cat $VFILE |grep m4_define |grep comptext_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep comptext_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep comptext_PATCH |awk '{print $2}') ;;
        comptty)
            MAJOR=$(cat $VFILE |grep m4_define |grep comptty_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep comptty_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep comptty_PATCH |awk '{print $2}') ;;
        flamp)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLAMP_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLAMP_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLAMP_PATCH |awk '{print $2}') ;;
        fldigi)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLDIGI_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLDIGI_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLDIGI_PATCH |awk '{print $2}') ;;
        fllog)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLLOG_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLLOG_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLLOG_PATCH |awk '{print $2}') ;;
        flmsg)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLMSG_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLMSG_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLMSG_PATCH |awk '{print $2}') ;;
        flnet)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLNET_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLNET_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLNET_PATCH |awk '{print $2}') ;;
        flrig)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLRIG_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLRIG_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLRIG_PATCH |awk '{print $2}') ;;
        flwkey)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLWKEY_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLWKEY_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLWKEY_PATCH |awk '{print $2}') ;;
        flwrap)
            MAJOR=$(cat $VFILE |grep m4_define |grep FLWRAP_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep FLWRAP_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep FLWRAP_PATCH |awk '{print $2}') ;;
        linsim)
            MAJOR=$(cat $VFILE |grep m4_define |grep linsim_MAJOR |awk '{print $2}' |cut -c2)
            MINOR=$(cat $VFILE |grep m4_define |grep linsim_MINOR |awk '{print $2}' |cut -c2)
            RAW=$(cat $VFILE |grep m4_define |grep linsim_PATCH |awk '{print $2}') ;;
        *) ;;
    esac

    # combine version number
    PATCH=${RAW:2:-2}
    BUILDV="$MAJOR.$MINOR.$PATCH"
    echo "* Package Version ..: $BUILDV"

}

# configure header-------------------------------------------------------------
configure_header() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" CONFIGURING"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    cd "$APP_SRC"
    echo '* Running Autoreconf to generate configure and Makefile'
    autoreconf -fi
    echo ''
}

# setup the install directory--------------------------------------------------
set_installd() {

    case "$BUILD_TYPE" in
        Native)
            if [[ $SEPARATE = "Yes" ]]; then
                INSTALLD="$LINUX/$APP_NAME/$BUILDV"
            else
                INSTALLD="$LINUX/$APP_NAME/install"
            fi
        ;;
        Cross)
            if [[ $NODENAME = "WIN-10" ]]; then
                INSTALLD="$WSL/$APP_NAME"
            else
                INSTALLD="$WIN32/$APP_NAME"
            fi
        ;;
    esac
}

# default configure(s)---------------------------------------------------------
native_configure() {
# TO-DO: v0.0.6 - Add configuration option selection for each package
# TO-DO: v0.0.6 - Verify Arm7 and Arm8 CFLAGS options are the same
# TO-DO: v0.0.6 - Check FLDIGI group recommendations for options by applicaitons

    case "$APP_NAME" in
        comptext|comptty|fldigi|flamp|fllog|flmsg|flnet|flrig|flwkey|flwrap|linsim)
        case "$HOST_CPU" in
                *arm* )
                    ./configure --prefix="$INSTALLD" --enable-static \
                    CC='gcc' \
                    CXX='g++' \
                    CFLAGS='-O2 -mfpu=vfp -mfloat-abi=hard -ffast-math -finline-functions' \
                    CXXFLAGS="$CFLAGS"
                ;;
                * )
                ./configure --prefix="$INSTALLD" --enable-optimizations=native --enable-static
                ;;
                esac
        ;;
# TO-DO: v0.0.6 - Add some warning message here if the wrong applications is selected somehow
        *)
        ;;
    esac
}

# default make invocation------------------------------------------------------
native_make() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" BUILDING"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    echo -e "* Build Type: "${C_G}'Static'${C_NC}
    echo ''
    make -j"$JJ"
}

# default install--------------------------------------------------------------
native_install() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" INSTALLING BINARIES"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    make install-strip
}

# get version info from Makefile-----------------------------------------------
common_version() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" GENERATE VERSION MARKER"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    case "$APP_NAME" in 
        comptext)
            RELEASE=$(grep 'comptext_VERSION =' < Makefile |awk '{print $3}') ;;
        comptty)
            RELEASE=$(grep 'comptty_VERSION =' < Makefile |awk '{print $3}') ;;		
        fldigi)
            RELEASE=$(grep 'FLDIGI_VERSION =' < Makefile |awk '{print $3}') ;;
        flamp)
            RELEASE=$(grep 'FLAMP_VERSION =' < Makefile |awk '{print $3}') ;;
        fllog)
            RELEASE=$(grep 'FLLOG_VERSION =' < Makefile |awk '{print $3}') ;;
        flmsg)
            RELEASE=$(grep 'FLMSG_VERSION =' < Makefile |awk '{print $3}') ;;
        flnet)
            RELEASE=$(grep 'FLNET_VERSION =' < Makefile |awk '{print $3}') ;;
        flrig)
            RELEASE=$(grep 'FLRIG_VERSION =' < Makefile |awk '{print $3}') ;;
        flwkey)
            RELEASE=$(grep 'FLWKEY_VERSION =' < Makefile |awk '{print $3}') ;;
        flwrap)
        RELEASE=$(grep 'FLWRAP_VERSION =' < Makefile |awk '{print $3}') ;;
        linsim)
        RELEASE=$(grep 'linsim_VERSION =' < Makefile |awk '{print $3}') ;;
        *) ;;
    esac
    echo "* Created version marker for: $APP_NAME-$RELEASE"
}

# build_log_copy---------------------------------------------------------------
copy_build_logs() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" COPY LOG FILES"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    echo "* Copied config.log, Makefile to: $INSTALLD"
    cp -u "$SRCD/$APP_NAME"/{config.log,Makefile} "$INSTALLD"
}

# install marker---------------------------------------------------------------
install_marker() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" GENERATING MARKERS"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    echo '* Removing old build marker'
    case "$BUILD_TYPE" in
        Native)
            rm -f "$INSTALLD/version.mkr" &>/dev/null
            rm -f "$MKRD/$APP_NAME-version.mkr" &>/dev/null
            echo '* Installing new version markers'
            echo $RELEASE > "$INSTALLD/$APP_NAME-version.mkr"
            echo $RELEASE > "$MKRD/$APP_NAME-version.mkr"
        ;;
        Cross)
            rm -f "$INSTALLD/version.mkr" &>/dev/null
            rm -f "$MKRDMXE/$APP_NAME-version.mkr" &>/dev/null
            echo '* Installing new version markers'
            echo $RELEASE > "$INSTALLD/$APP_NAME-version.mkr"
            echo $RELEASE > "$MKRDMXE/$APP_NAME-version.mkr"
        ;;
    esac
}

# change ownership-------------------------------------------------------------
change_ownership() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" VERIFY OWNERSHIP"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    LOGNAME=$LOGNAME
    LOGGRP=$(groups $LOGNAME | cut -d ' ' -f 3)
    chown -R "$LOGNAME":"$LOGGRP" "$LINUX/$APP_NAME"
    echo "* Updated ownership to [ $LOGNAME ]"
}

# clean the build tree---------------------------------------------------------
clean_build_tree() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" CLEANING BUILD TREE"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    make clean &>/dev/null
    echo '* Cleaned build tree with..: make clean'
    make distclean &>/dev/null
    git clean -qfd
    echo '* Cleaned Git repo with....: git clean -qfd'
}

# finish build message---------------------------------------------------------
build_summary() {
    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_G}" BUILD SUMMARY"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    echo -e ' Build Type ...: '${C_G}"$BUILD_TYPE"${C_NC}
    echo " Link Config ..: $LINK_TYPE"
    echo " Version ......: $APP_NAME-$RELEASE"
    if [[ $BUILD_TYPE = "Cross" ]]; then
        echo " Installer ....: $APP_NAME-$RELEASE"'_setup.exe'
        echo " Location .....: $INSTALLD"
    fi
    echo " Source .......: $APP_SRC"
    if [[ $BUILD_TYPE = "Native" ]]; then
        echo " Install ......: $INSTALLD"
        echo ''    
        echo " TO RUN $APP_NAME"
        echo " Type, ........: cd $INSTALLD/bin"
        echo " Type, ........: ./$APP_NAME"
        echo ''
    fi
    echo ''
    cd "$HOMEDIR"
    read_pause
}

# build the application--------------------------------------------------------
build_application() {

    case "$BUILD_TYPE" in
        Native)
            APP_SRC="$SRCD/$APP_NAME"
            LINK_TYPE='Static'
            for f in ${native_build_array[@]} ; do "$f" ; done
            continue
        ;;
        Cross)
            APP_SRC="$SRCD/$APP_NAME"
            LINK_TYPE='Static'
            for f in ${mxe_build_array[@]} ; do "$f" ; done
    esac
}


###############################################################################
# MXE SPECIFIC FUNCTIONS
###############################################################################

# check if packages are already installed-----------------------------------MXE
mxe_package_check() {

    # reset installation array
    mxe_install_sys_pkg_array=()

    cd "$HOMEDIR"
    echo "-------------------------------------------"
    echo -e ${C_Y}" CHECKING PACKAGE INSTALL STATUS"${C_NC}
    echo "-------------------------------------------"
    for p in "${linux_sys_pkg_array[@]}"
    do
        echo " Checking : $p"
        status=$(apt-cache policy $p | grep "Installed:" | awk '{print $2}')

        # if the policy check fails, add package to the install array
        if [[ $status = "(none)" ]]; then
        mxe_install_sys_pkg_array+=($p)
        fi
    done
    echo ""
}

# install packages found in mxe_install_sys_pkg_array()---------------------MXE
mxe_sys_install() {

    installLength=${#mxe_install_sys_pkg_array[@]}

    if [[ $installLength -gt 0 ]]; then
        echo "-------------------------------------------"
        echo -e ${C_Y}" START PACKAGE INSTALLATION"${C_NC}
        echo "-------------------------------------------"
        echo ""
        echo "* Packages Needed : [ $installLength ]"
        echo ""
        sudo apt-get -q install -y $(echo "${mxe_install_sys_pkg_array[@]}")
    else
        echo "* Nothing to be done, no packages needed"
    fi
    echo ""
}

# clone MXE-----------------------------------------------------------------MXE
mxe_clone() {
    echo "-------------------------------------------"
    echo -e ${C_Y}" CHECKING INSTALL STATUS of MXE"${C_NC}
    echo "-------------------------------------------"
    cd "$HOMEDIR"
    echo ""
    if [[ -d $MXED/.git ]]; then
        echo "* MXE checkout exists"
    else
        echo "* MXE not found. Cloining from Github --depth=1"
        echo ""
        git clone "$MXEURL"
    fi
    echo ""
    cd "$HOMEDIR"
}

# build MXE binariles and libraries-----------------------------------------MXE
mxe_build() {
    cd "$MXED"
    echo "-------------------------------------------"
    echo -e ${C_Y}" START MXE PACKAGE BUILD"${C_NC}
    echo "-------------------------------------------"
    echo ""
    echo "* Directory: $(pwd)"
    echo "* Using [ "$JJ" ] parallel threads"
    echo "* Using [ "$J2" ] simultaneous jobs"
    echo "* Building MXE packages"
    echo ""
    make JOBS="$JJ" --jobs="$J2" $(echo ${mxe_pkg_array[@]})
    echo ""
    cd "$HOMEDIR"
}

# add hamlib entry to packages.json file------------------------------------MXE
mxe_add_hamlib_json() {
# TO-DO: v0.0.6 - When hamlib.mk reaches mxe.cc, remove this function
    echo "-------------------------------------------"
    echo -e ${C_Y}" UPDATING HAMLIB JSON ENTRY"${C_NC}
    echo "-------------------------------------------"
    echo ""
    # force removal of hamlib entry in json file
    if [[ -f $HOMEDIR/mxe/docs/packages.json ]]; then
        sed -n '/hamlib/d' $HOMEDIR/mxe/docs/packages.json
    fi 
    echo "* Adding hamlib entry to packages.json"
    echo "* Note: when hamlib.mk is added to mxe,"
    echo "        this step will become obsolete"
    sed -i '/guile/a \    \"hamlib": {"version": "3.2~git", "website": "http://n0nb.users.sourceforge.net/", "description": "Hamlib"},' $MXED/docs/packages.json
    echo ""
}

# add hamlib.mk for packages.json file--------------------------------------MXE
mxe_generate_hamlibmk() {
    cd "$MXED/src"
    echo "-------------------------------------------"
    echo -e ${C_Y}" GENERATING HAMLIB MX FILE"${C_NC}
    echo "-------------------------------------------"
    echo ""
    echo "*  Generating hamlib.mk file"
    # call the Python Script:
    @PYTHON3@ @BINDIR@/flsdk-hamlibmk
    
    # after updating or changing the .mk file, a hash update must 
    # pe performed
    echo "*  Updating hash for hamlib archive file"
    cd "$MXED"
    make update-checksum-hamlib >/dev/null 2>&1
    echo ""
    cd "$HOMEDIR"
}

# build Hamlib with MXE-----------------------------------------------------MXE
mxe_update_hamlib() {
# TO-DO: v0.0.6 - Add mxe.m4 --with-enable=PATH
    cd "$MXED"
    echo "-------------------------------------------"
    echo -e ${C_Y}" UPDATING HAMLIB PACKAGE BUILD"${C_NC}
    echo "-------------------------------------------"
    echo ""
    echo " * Directory: $(pwd)"
    echo " * Using [ "$JJ" ] parallel threads"
    echo " * Using [" $J2" ] simultaneous jobs"
    echo " * Updating Hamlib"
    echo ""
    make update-package-hamlib
	make JOBS="$JJ" --jobs="$J2" hamlib
    cd "$HOMEDIR"
    echo ""
}

# perform wsl package update------------------------------------------------MXE
# TO-DO: v0.0.6 - Add check and case switch, do not update non-Ubuntu systems
mxe_sys_update() {
    cd "$HOMEDIR"
    clear ||:
    echo "-------------------------------------------"
    echo -e ${C_Y}" WSL System Package Update and Upgrade"${C_NC}
    echo "-------------------------------------------"
    echo ""
    sudo apt-get update && sudo apt-get -y upgrade
    echo ""
}

# perform WSL system cleanup------------------------------------------------MXE
wsl_sys_clean() {
# TO-DO: v0.0.6 - Add check and case switch, do not clean non-Ubuntu systems
	cd "$HOMEDIR"
	echo "-------------------------------------------"
	echo -e ${C_Y}" WSL System Cleanup"${C_NC}
	echo "-------------------------------------------"
    echo ""
    sudo apt-get clean && sudo apt-get autoclean
}

# MXE remove junk and unused package files----------------------------------MXE
mxe_clean() {
    echo "-------------------------------------------"
	echo -e ${C_Y}" CLEANING MXE JUNK FILES"${C_NC}
    echo "-------------------------------------------"
    cd "$MXED"
    echo "* remove unused files, folders, and logs"
    make clean-junk > /dev/null 2>&1
    echo "* remove unused package files"
    make clean-pkg > /dev/null 2>&1
    echo ""
    cd "$HOMEDIR"
}

# MXE unset env variables---------------------------------------------------MXE
mxe_unset_env_variables() {
    export PATH="$ORIG_PATH"
    export PREFIX=""
    export CROSSCFG=""
    export PKGCFG=""
}

# default make invocation---------------------------------------------------MXE
mxe_run_cross_script() {
    # set cross variabels 
    # Credit: https://fedorahosted.org/fldigi/wiki/Documentation/HOWTO/BuildWithMXE
    export PREFIX="$HOMEDIR/mxe/usr"
    export CROSSCFG="--host=i686-w64-mingw32.static"
    export PKGCFG="PKG_CONFIG=$PREFIX/bin/i686-w64-mingw32.static-pkg-config"
    export PATH=$HOMEDIR/mxe/usr/bin/:$PATH

    echo ''
    echo '-----------------------------------------------------'
    echo -e ${C_Y}" BUILDING ( $APP_NAME $BUILD_TYPE )"${C_NC}
    echo '-----------------------------------------------------'
    echo ''
    echo ''
    # these are taken directly from the FLDIGI build MXE scripts
    # minor modification to copy location have been made
    case $APP_NAME in
        fldigi)
            ./configure $PKGCFG $CROSSCFG \
            --without-asciidoc \
            --with-ptw32=$PREFIX/i686-w64-mingw32.static \
            --with-libiconv-prefix=$PREFIX/iconv \
            --enable-static \
            --with-libintl-prefix=$PREFIX/gettext \
            PTW32_LIBS="-lpthread -lpcreposix -lpcre -lregex" \
            FLTK_CONFIG=$PREFIX/bin/i686-w64-mingw32.static-fltk-config

            make
            $PREFIX/bin/i686-w64-mingw32.static-strip src/fldigi.exe
            $PREFIX/bin/i686-w64-mingw32.static-strip src/flarq.exe
        ;;
        flwrap)
            ./configure $PKGCFG $CROSSCFG \
            --with-ptw32=$PREFIX/i686-w64-mingw32.static \
            --with-libiconv-prefix=$PREFIX/iconv \
            --enable-static \
            PTW32_LIBS="-lpthread -lpcreposix -lpcre -lregex" \
            FLTK_CONFIG=$PREFIX/bin/i686-w64-mingw32.static-fltk-config 

            make
            "$PREFIX"/bin/i686-w64-mingw32.static-strip src/"$APP_NAME".exe
        ;;
        *)
            ./configure $PKGCFG $CROSSCFG \
            --with-ptw32=$PREFIX/i686-w64-mingw32.static \
            --enable-static \
            PTW32_LIBS="-lpthread -lpcreposix -lpcre -lregex" \
            FLTK_CONFIG=$PREFIX/bin/i686-w64-mingw32.static-fltk-config 

            make
            "$PREFIX"/bin/i686-w64-mingw32.static-strip src/"$APP_NAME".exe
        ;;
    esac

    # make the installers
    make nsisinst
    
    # move instalers to install locations
    if [[ $NODENAME = "WIN-10" ]]; then
        mkdir -p "$WSL/$APP_NAME"
        mv src/*setup*.exe "$WSL/$APP_NAME"
    else
        mkdir -p "$WIN32/$APP_NAME"
        mv src/*setup*.exe "$WIN32/$APP_NAME"
    fi

    # reset the env variables
    export PATH="$ORIG_PATH"
    export PREFIX=""
    export CROSSCFG=""
    export PKGCFG=""
}

# linux native build menu------------------------------------------------------
build_selection() {

    unset BUILD_SELECT

    if [[ $BUILD_TYPE = "Cross" ]]; then
        MSG="$MXEBLDMSG"
    else
        MSG="$RELMSG"
    fi

    BUILD_SELECT=$(
    dialog --ok-label SELECT \
    --nocancel \
    --backtitle "$BACKTITLE" \
    --title "$MSG" \
    --menu "$MENUMSG" 20 55 20 \
    "${APP_MENU[@]}" 2>&1 > /dev/tty
    )
    case "$BUILD_SELECT" in
        1) APP_NAME='comptty' ; build_application ;;
        2) APP_NAME='comptext' ; build_application ;;
        3) APP_NAME='fldigi' ; build_application ;;
        4) APP_NAME='flamp' ; build_application ;;
        5) APP_NAME='flmsg' ; build_application ;;
        6) APP_NAME='flrig' ; build_application ;;
        7) APP_NAME='flwkey' ; build_application ;;
        8) APP_NAME='fllog' ; build_application ;;
        9) APP_NAME='flnet' ; build_application ;;
        10) APP_NAME='flwrap' ; build_application ;;
        11) APP_NAME='linsim' ; build_application ;;
        B) return 0 ;;
    esac
}

# mxe setup--------------------------------------------------------------------
mxe_setup() {

    unset MXE_SETUP

    MXE_SETUP=$(
    dialog --ok-label SELECT \
    --nocancel \
    --backtitle "$BACKTITLE" \
    --title "$MXESETUPMSG" \
    --menu "$MENUMSG" 14 55 20 \
    "${MXE_SETUP_MENU[@]}" 2>&1 > /dev/tty
    )
    case "${MXE_SETUP}" in
    # Full MXE Install
    1)
        clear ||:
        for i in "${!mxe_setup_array[@]}"
        do
            ${mxe_setup_array[$i]}
        done 
     ;; 
    # Update Ubuntu system Packages
    2)
        clear ||:
        mxe_sys_update
        read_pause
    ;; 
    # Update MXE Packages
    3)
        clear ||:
        for i in "${!mxe_update_array[@]}"
        do 
            ${mxe_update_array[$i]}
        done
    ;; 
    4)
        mxe_update_hamlib
        echo ""
        read_pause
    ;;
    5)
        clear ||:
        wsl_sys_clean
        echo ""
        mxe_clean
        read_pause
    ;; 
    B) return 0 ;;
    esac
}

# Linux Native Build Array
native_build_array=( 'build_header' 'git_check' 'get_version' \
'configure_header' 'set_installd' 'native_configure' 'native_make' \
'native_install' 'common_version' 'copy_build_logs' 'install_marker' \
'change_ownership' 'clean_build_tree' 'build_summary'
)

# MXE Build Array
mxe_build_array=( 'build_header' 'git_check' 'get_version' 'configure_header' \
'set_installd' 'mxe_run_cross_script' 'common_version' 'copy_build_logs' \
'install_marker' 'clean_build_tree' 'build_summary'
)

# MXE full Setup
mxe_setup_array=( 'mxe_package_check' 'mxe_sys_install' 'mxe_clone' 'mxe_build' \
'mxe_clean' 'read_pause'
)

# MXE Update Only
mxe_update_array=( 'mxe_clone' 'mxe_build' 'read_pause')

# MXE Build Hamlib Only
mxe_update_hamlib_array=( 'mxe_update_hamlib' 'read_pause'
)


###############################################################################
# MENUS ARRAYS
###############################################################################
# TO-DO: v0.0.5 - Update Main Menu Help for dialog
# TO-DO: v0.0.5 - Add Linux Native help for dialog
# TO-DO: v0.0.5 - Add MXE Cross Build help for dialog
# TO-DO: v0.0.5 - Add MXE Cross Setup help file for dialog

# Linux Main Menu Array
LINUX_MAIN=( 1 "Native Build Selection" 2 "MXE Cross Build Selection" \
3 "MXE Setup Menu" 4 "Version Check" H "Help" E "Exit")

# WSL Main Menu Array
WSL_MAIN=( 1 "MXE Cross Build Selection" 2 "MXE Setup Menu" \
3 "Version Check" H "Help" E "Exit")

APP_MENU=(1 "COMPTTY" 2 "COMPTEXT" 3 "FLDIGI" 4 "FLAMP" 5 "FLMSG" \
6 "FLRIG" 7 "FLWKEY" 8 "FLLOG" 9 "FLNET" 10 "FLWRAP" 11 "LINSIM" \
B "Back"
)

MXE_SETUP_MENU=(1 "Full MXE System Setup" 2 "Update System Packages" \
3 "Update MXE Packages" 4 "Update Hamlib" 5 "System Clean Up" B "Back"
)


###############################################################################
# START MAIN SCRIPT
###############################################################################

# set traps
trap sig_catch_cleanup SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP

# set shell options
set_options

# root check
root_chk

# dialog check
dialog_chk

# generate dialog rc
make_dialogrc

# menu help files
HELP="$DOCS/main_menu_help.txt"

# MAIN MENU--------------------------------------------------------------------

# set the menu selection variable, prevents set -o ( unset variable ) error
# set the main menu based on Win-10 WSL or Native Linux
while [ 0 ]; do

case $NODENAME in
    WIN-10)
        WSL_SELECT=$(
        dialog --ok-label SELECT \
        --nocancel \
        --backtitle "$BACKTITLE" \
        --title "$WSLTITLE" \
        --menu "$MENUMSG" 13 55 20 \
        "${WSL_MAIN[@]}" 2>&1 > /dev/tty
        )
        case "$WSL_SELECT" in
            1) BUILD_TYPE="Cross" ; build_selection ; continue ;;
            2) mxe_setup ; continue ;;
            3) version_check ; continue ;;
            H) dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$HTITLE" --textbox "$HELP" 20 80 ; continue ;;
            E) clean_exit ;;
        esac
    ;;
    *)
        LINUX_SELECT=$(
        dialog --ok-label SELECT \
        --nocancel \
        --backtitle "$BACKTITLE" \
        --title "$LNTITLE" \
        --menu "$MENUMSG" 15 55 20 \
        "${LINUX_MAIN[@]}" 2>&1 > /dev/tty
        )
        case "$LINUX_SELECT" in
            1) BUILD_TYPE="Native" ; build_selection ; continue ;;
            2) BUILD_TYPE="Cross" ; build_selection ; continue ;;
            3) mxe_setup ; continue ;;
            4) version_check ; continue ;;
            H) dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$HTITLE" --textbox "$HELP" 20 80 ; continue ;;
            E) clean_exit ;;
        esac
    ;;
esac

done

