#!/usr/bin/env bash
#
# Name..........: @PROGRAM@ @VERSION@
# Execution.....: As normal user type: flsdk
# Copyright.....: @COPYRIGHT@
# License.......: @LICENSE@
# Contributors..: @AUTHORS@
# Comment.......: Part of the @PROGRAM@ Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------------#

# TO-DO: v0.0.6 - Add option menus / functions to build both Release & Alpha
# TO-DO: v0.0.6 - Add M4 macro to test for sse, sse3, sse4 options

# home and main options
HOMEDIR=~/flsdk
SEPARATE=@SEPARATE@
JJ=@JJJJ@
MXEURL="https://github.com/mxe/mxe.git"

# system informaiton / selections
DESC='@DESC@'
HOST_OS=@HOST_OS@
HOST_CPU=@HOST_CPU@
WIN10=@WIN10@

# system directories
DOCS=@DOCDIR@

# application install directories
COMPTEXTI="$HOMEDIR/comptext"
COMPTTYI="$HOMEDIR/comptty"
FLAMPI="$HOMEDIR/flamp"
FLDIGII="$HOMEDIR/fldigi"
FLLOGI="$HOMEDIR/fllog"
FLMSGI="$HOMEDIR/flmsg"
FLNETI="$HOMEDIR/flmsg"
FLRIGI="$HOMEDIR/flrig"
FLWKEYI="$HOMEDIR/flwkey"
FLWRAPI="$HOMEDIR/flwrap"
LINSIMI="$HOMEDIR/linsim"

# general use directories and variables
# TO-DO: v0.0.5 - Add MXEMKRD to configure.ac and Makfile.in
LOGD="$HOMEDIR/logs"
MKRD="$HOMEDIR/mkrd"
MXEMKRD="$HOMEDIR/mxe-mkrd"
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
WIN32="$HOMEDIR/win32"
VERLOG="$TMPD/ver.tmp"

# generl use variables
CHK=${C_G}OK${C_NC}
NONE=' - '

# application list array
app_array=('comptext' 'comptty' 'flamp' 'fldigi' 'flmsg' 'fllog' 'flnet' 'flrig' 'flwkey' 'flwrap' 'linsim')

# setup foreground colours
C_R='\033[01;31m'   # red
C_G='\033[01;32m'   # green
C_Y='\033[01;33m'   # yellow
C_C='\033[01;36m'   # cyan
C_NC='\033[01;37m'  # no color

# make sure all directories exist
mkdir -p "$HOMEDIR"/{src,tmp,logs,mkrd,mxe-mkrd}
mkdir -p "$WIN32"/{flamp,fldigi,fllog,flmsg,flnet,flrig,flwkey,flwrap,comptext,comptty,linsim}
mkdir -p "$COMPTEXTI" "$COMPTTYI" "$FLAMPI" "$FLDIGII" "$FLLOGI" "$FLMSGI" "$FLNETI" "$FLRIGI" "$FLWKEYI" "$FLWRAPI" "$LINSIMI"

# for Linux, mxe installers go to.......: $WIN32/<appname>
# for Win-10 WSL, mxe installers go to..: C:\FLSDK\installers\<app-name>
for a in "${app_array[@]}"
do
    if [[ $WIN10 == "Yes" ]]; then
        mkdir -p "/mnt/c/FLSDK/installers/$a"
    else
        mkdir -p "$WIN32/$a"
    fi
done

# system package list from MXE.cc and misc packages for flsdk
# Note: The majority of these are installed on major distributions,
#       however, Win-10 WSL needs this to ensure properly building
mxe_sys_pkg_array=('autoconf' 'automake' 'autopoint' 'autotools-dev' 'bash' 'bison' \
'bzip2' 'dialog' 'flex' 'gettext' 'git' 'g++''g++-multilib' 'gperf' \
'intltool' 'libffi-dev' 'libgdk-pixbuf2.0-dev' 'libtool' 'libltdl-dev' \
'libssl-dev' 'libxml-parser-perl' 'm4' 'make' 'openssl' 'p7zip-full' \
'patch' 'perl' 'pkg-config' 'python' 'python3' 'python3-requests' \
'python3-bs4' 'ruby' 'scons' 'sed' 'unzip' 'wget' 'xz-utils' 'libc6-dev-i386'
)

# mxe build list, required to build FLDIGI applications
mxe_pkg_array=('gcc' 'boost' 'fltk' 'gettext' 'gdb' 'glib' 'gnutls' 'hamlib' \
	'jpeg' 'portaudio' 'libsamplerate' 'libsndfile' 'libltdl' 'libpng' \
	'libtool' 'libxml2' 'pthreads' 'xz'
)

# set reasonable menu height & width.
echo -e "\e[8;40;120t"

################################################################################
# LANGUAGE SECTION
################################################################################

# backtitle lang
BACKTITLE="@PROGRAM@ @VERSION@"

# root chk lang
RCTITLE="ROOT / SUDO CHECK FAILED"
RCMSG="    @PROGRAM@ must be run as normal user, not root or sudo.\n\
          Please run "$0" without "sudo" prefix"

# dialog lang
DITITLE="DIALOG INSTALL"
DIMSG="        @PROGRAM@ Will now install Dialog Msg CLient"
DISUCTITLE="DIALOG INSTALL COMPLETE"
DISUCMSG="\n      Dialog Install Complete."

# sig catch lang
SIGCAUGHT="   SIGNAL CAUGHT"
SIGCAUGHTMSG="\n   Signal Caught, Performing Cleanup Routine"
CLEANTMP=" CLEANING TMP"
CLEANTMPMSG="\n         Cleaning Up Temporary Files"
RESETOPT=" RESET OPTIONS"
RESETOPTMSG="\n         Resetting Used Bash Options"
CLEANVAR=" CLEANING VARS"
CLEANVARMSG="\n             Unset Used Variables"

# exit lang
EXITWSDT=" EXIT @PROGRAM@"
EXITWSDTMSG="\n      Performing Shutdown Cleanup Routine"

# main menu lang
MMTITLE=" @PROGRAM@ MAIN MENU"
MENUMSG="            Key the letter then hit [ENTER]\n\
     Arrow Up/Dwn or '+' or '-' Keys to Navigate\n\n"

# help menu lang
HTITLE="APPLICATION BUILD HELP DOCUMENT"

# setup check lang
SETUPTITLE="  SETUP REQUIRED"
SETUPMSG="\n   In Order to use @PROGRAM@, you must first run setup.sh \n\
     Select 'OK' then at command prompt run: ./setup.sh\n"

# under development
UD=" UNDER DEVELOPMENT"
UDMSG="\n      Build Selection is Under Development"

################################################################################
# MENU SECTION
################################################################################

# main menu
touch "$TMPD/MMenu.tmp"
cat << 'EOF' > "$TMPD"/MMenu.tmp 
"1" "COMPTTY .... (Git Repo)" \
"2" "COMPTEXT ... (Git Repo)" \
"3" "FLDIGI ..... (Git Repo)" \
"4" "FLAMP ...... (Git Repo)" \
"5" "FLMSG ...... (Git Repo)" \
"6" "FLRIG ...... (Git Repo)" \
"7" "FLWKEY ..... (Git Repo)" \
"8" "FLLOG ...... (Git Repo)" \
"9" "FLNET ...... (Git Repo)" \
"10" "FLWRAP ..... (Git Repo)" \
"11" "LINSIM ..... (Git Repo)" \
"V" "Check App Versions" \
"H" "Help" \
"E" "Exit"
EOF

# menu for native builds
touch "$TMPD/BuildMenuNix.tmp"
cat << 'EOF' > "$TMPD/BuildMenuNix.tmp"
"1" "COMPTTY .... (Git Repo)" \
"2" "COMPTEXT ... (Git Repo)" \
"3" "FLDIGI ..... (Git Repo)" \
"4" "FLAMP ...... (Git Repo)" \
"5" "FLMSG ...... (Git Repo)" \
"6" "FLRIG ...... (Git Repo)" \
"7" "FLWKEY ..... (Git Repo)" \
"8" "FLLOG ...... (Git Repo)" \
"9" "FLNET ...... (Git Repo)" \
"10" "FLWRAP ..... (Git Repo)" \
"11" "LINSIM ..... (Git Repo)" \
"V" "Check App Versions" \
"H" "Help" \
"E" "Exit"
EOF

# main menu
touch "$TMPD/MXEMain.tmp"
cat << 'EOF' > "$TMPD"/MXEMain.tmp 
"1" "Full System Setup" \
"2" "Install or Update System Packages" \
"3" "Install or Update MXE Packages" \
"4" "Build MXE Hamlib Package Only" \
"5" "System Clean Up"
"E" "Exit"
EOF

# menu for MXE builds
touch "$TMPD/MXEBuildMenu.tmp"
cat << 'EOF' > "$TMPD/MXEBuildMenu.tmp"
"1" "COMPTTY .... (Git Repo)" \
"2" "COMPTEXT ... (Git Repo)" \
"3" "FLDIGI ..... (Git Repo)" \
"4" "FLAMP ...... (Git Repo)" \
"5" "FLMSG ...... (Git Repo)" \
"6" "FLRIG ...... (Git Repo)" \
"7" "FLWKEY ..... (Git Repo)" \
"8" "FLLOG ...... (Git Repo)" \
"9" "FLNET ...... (Git Repo)" \
"10" "FLWRAP ..... (Git Repo)" \
"11" "LINSIM ..... (Git Repo)" \
"V" "Check App Versions" \
"H" "Help" \
"E" "Exit"
EOF


###############################################################################
# COMMON FUNCTIONS
###############################################################################

#--set options------------------------------------------------------------------
set_options() {
set -e                 # exit immediately on any error
set -o pipefail        # pipeline fail return exit status
set -u                 # undefined variables
}

# unset options----------------------------------------------------------------
unset_options() {
set +e
set +o pipefail
set +u
unset INSTALLD
}

# under development------------------------------------------------------------
under_development() {

dialog --clear --backtitle "$BACKTITLE" --title "$UD" --msgbox "$UDMSG" 7 50

}

# signal catch-----------------------------------------------------------------
sig_catch_cleanup() {
EXIT_STATUS="$?"

if [ "$EXIT_STATUS" == "0" ]
then
   clean_exit

else

dialog --backtitle "$BACKTITLE" --title "$SIGCAUGHT" --infobox "$SIGCAUGHTMSG" 5 50
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
	rm -r  "$TMPD"/*
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	clear

	echo "Exit Status [ $EXIT_STATUS ]"
	echo "@PROGRAM@ Signal Catch Cleanup Complete"
	echo ''
	trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
	unset exit_status
	exit
fi
}

# root check-------------------------------------------------------------------
root_chk() {
MSGCLIENT=""
TESTD=$(dpkg --get-selections dialog | awk '{print $1}')

if [ "$TESTD" = "dialog" ]
then
   MSGCLIENT="dialog"
  else
   MSGCLIENT="whiptail"
fi
clear

if [ "$EUID" = "0" ]
then
"$MSGCLIENT" --title "$RCTITLE" --backtitle "$BACKTITLE" --msgbox "$RCMSG" 7 70
clean_exit
exit
fi
clear

unset {TESTVAR,MSGCLIENT}
}

# dialog check-----------------------------------------------------------------
dialog_chk() {
INSTALLED=$(dialog --version |awk '{print $1}')

if [ "$INSTALLED" == "Version:" ]; then
   MSGCLIENT="dialog"

elif [ "$INSTALLED" != "dialog" ]; then
   MSGCLIENT="whiptail"
   clear

"$MSGCLIENT" --clear --title "$DITITLE" --backtitle "$BACKTITLE" --msgbox "$DIMSG" 7 70
   touch "$LOGD"/install_log
   sudo apt-get -qy install dialog | tee 2>> "$LOGD"/install_log
   wait
   dialog --create-rc ~/.dialogrc
   wait
   cp "$CONFIG"/debian.rc ~/.dialogrc
   wait
   clear

dialog --title "$DISUCTITLE" --backtitle "$BACKTITLE" --msgbox "$DISUCMSG" 7 40
sudo -k

fi
}

# normal shutdown--------------------------------------------------------------
clean_exit() {
local EXIT_STATUS="$?"

dialog --backtitle "$BACKTITLE" --title "$EXITWSDT" --infobox "$EXITWSDTMSG" 5 50
   sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
   rm -r "$TMPD"/*
   wait
   sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	sleep 1
	clear
	echo "Exit Status [ $EXIT_STATUS ]"
	echo "@PROGRAM@ Clean Exit Complete."
	echo ''
	trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
	unset EXIT_STATUS
exit
}

# dialog rc file--------------------------------------------------------------
make_dialogrc() {

rm -f "$TMPD/.dialogrc" &>/dev/null ; touch "$TMPD/.dialogrc"

(
cat <<'EOF_DIALOGRC'
aspect = 0
border_color = (WHITE,WHITE,ON)
button_active_color = (WHITE,BLUE,ON)
button_inactive_color = (BLACK,WHITE,OFF)
button_key_active_color = (WHITE,BLUE,ON)
button_key_inactive_color = (RED,WHITE,OFF)
button_label_active_color = (YELLOW,BLUE,ON)
button_label_inactive_color = (BLACK,WHITE,ON)
check_color = (BLACK,WHITE,OFF)
check_selected_color = (WHITE,BLUE,ON)
darrow_color = (GREEN,WHITE,ON)
dialog_color = (BLACK,WHITE,OFF)
form_active_text_color = (WHITE,BLUE,ON)
form_item_readonly_color = (CYAN,WHITE,ON)
form_text_color = (WHITE,CYAN,ON)
gauge_color = (BLUE,WHITE,ON)
inputbox_border_color = (BLACK,WHITE,OFF)
inputbox_color = (BLACK,WHITE,OFF)
item_color = (BLACK,WHITE,OFF)
itemhelp_color = (YELLOW,BLACK,OFF)
item_selected_color = (YELLOW,BLACK,ON)
menubox_border_color = (WHITE,WHITE,ON)
menubox_color = (BLACK,WHITE,OFF)
position_indicator_color = (BLUE,WHITE,ON)
screen_color = (CYAN,BLUE,ON)
searchbox_border_color = (WHITE,WHITE,ON)
searchbox_color = (BLACK,WHITE,OFF)
searchbox_title_color = (BLUE,WHITE,ON)
separate_widget = ""
shadow_color = (BLACK,BLACK,ON)
tab_len = 2
tag_color = (BLACK,WHITE,ON)
tag_key_color = (BLACK,WHITE,ON)
tag_key_selected_color = (YELLOW,BLACK,ON)
tag_selected_color = (YELLOW,BLACK,ON)
title_color = (BLUE,WHITE,ON)
uarrow_color = (RED,WHITE,ON)
use_colors = ON
use_shadow = ON
visit_items = OFF
EOF_DIALOGRC
) > "$TMPD/.dialogrc"

# use the new dialogrc
export DIALOGRC="$TMPD/.dialogrc"

}

# main header------------------------------------------------------------------
build_header() {
STEP='Main Header'
clear
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" STARTING BUILD for ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
echo ''
}

# git check--------------------------------------------------------------------
git_check() {
STEP='Git Phase'
if [ -f "$APP_SRC/configure.ac" ]; then
    if [ -f "$APP_SRC/Makefile" ]; then
        cd "$APP_SRC"
        echo 'Cleaning Repository Tree'
        make clean &>/dev/null
        make distclean &>/dev/null
        git clean -d -x -f &>/dev/null
    fi
    echo 'Performing Git Pull'
    cd "$APP_SRC"
    git pull
else
    echo 'Performing Git Clone'
    rm -rf "$APP_SRC" &>/dev/null
    cd "$SRCD"
    git clone --depth 1 git://git.code.sf.net/p/fldigi/$APP_NAME $APP_NAME
fi
echo ''
}

# get version fomr configure.ac------------------------------------------------
get_version() {
STEP='Get Version Information Phase'

# Example: From FLDIGI configure.ac 05-SEP-2015
# -----------------------------------------------------------------------------
# m4_define(FLLOG_MAJOR,  [3])
# m4_define(FLLOG_MINOR,  [22])
# m4_define(FLLOG_PATCH,  [.13])
# -----------------------------------------------------------------------------
echo '-----------------------------------------------------'
echo -e ${C_Y}" GET VERSION INFOMATION"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo "* Parsing [ configure.ac ]"
VFILE="$APP_SRC/configure.ac"
case "$APP_NAME" in 
    comptext)
        MAJOR=$(cat $VFILE |grep m4_define |grep comptext_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep comptext_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep comptext_PATCH |awk '{print $2}') ;;
    comptty)
        MAJOR=$(cat $VFILE |grep m4_define |grep comptty_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep comptty_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep comptty_PATCH |awk '{print $2}') ;;		
    flamp)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLAMP_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLAMP_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLAMP_PATCH |awk '{print $2}') ;;
    fldigi)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLDIGI_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLDIGI_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLDIGI_PATCH |awk '{print $2}') ;;
    fllog)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLLOG_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLLOG_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLLOG_PATCH |awk '{print $2}') ;;
    flmsg)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLMSG_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLMSG_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLMSG_PATCH |awk '{print $2}') ;;
    flnet)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLNET_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLNET_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLNET_PATCH |awk '{print $2}') ;;
    flrig)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLRIG_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLRIG_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLRIG_PATCH |awk '{print $2}') ;;
    flwkey)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLWKEY_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLWKEY_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLWKEY_PATCH |awk '{print $2}') ;;
    flwrap)
        MAJOR=$(cat $VFILE |grep m4_define |grep FLWRAP_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep FLWRAP_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep FLWRAP_PATCH |awk '{print $2}') ;;
    linsim)
        MAJOR=$(cat $VFILE |grep m4_define |grep linsim_MAJOR |awk '{print $2}' |cut -c2)
        MINOR=$(cat $VFILE |grep m4_define |grep linsim_MINOR |awk '{print $2}' |cut -c2)
        RAW=$(cat $VFILE |grep m4_define |grep linsim_PATCH |awk '{print $2}') ;;
    *) ;;
esac

# compine the version number
PATCH=${RAW:2:-2}
BUILDV="$MAJOR.$MINOR.$PATCH"
echo "* Package Version ..: $BUILDV"

}

# configure header-------------------------------------------------------------
configure_header() {
STEP='Autoreconf Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CONFIGURING"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$APP_SRC"

echo '* Running Autoreconf to generate configure and Makefile'
autoreconf -f -i
echo ''
}

# setup the install directory--------------------------------------------------
set_installd() {

# set the install directory based on --enable-separate ( enabled by default )
if [ "$SEPARATE" = "Yes" ]; then
	INSTALLD="$HOMEDIR/$APP_NAME/$BUILDV"
else
	INSTALLD="$HOMEDIR/$APP_NAME/install"
fi

}

# default configure(s)---------------------------------------------------------
default_configure() {
STEP='Configure Phase'

# TO-DO: v0.0.6 - Add configuration option selection for each package
case "$APP_NAME" in
    comptext|comptty|fldigi|flamp|fllog|flmsg|flnet|flrig|flwkey|flwrap|linsim)
    case "$HOST_CPU" in
            *arm* )
                ./configure --prefix="$INSTALLD" --enable-static \
                CC='gcc' \
                CXX='g++' \
                CFLAGS='-O2 -mfpu=vfp -mfloat-abi=hard -ffast-math -finline-functions' \
                CXXFLAGS="$CFLAGS"
            ;;
            * )
            ./configure --prefix="$INSTALLD" --enable-optimizations=native --enable-static
            ;;
            esac
    ;;
# TO-DO: v0.0.6 - Add some warning message here if the wrong applications is selected somehow
    *)
    ;;
esac
}

# default make invocation------------------------------------------------------
default_make() {
STEP='Make Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BUILDING"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo -e "* Build Type: "${C_G}'Static'${C_NC}
echo ''
make -j$JJ
}


# default install--------------------------------------------------------------
default_install() {
STEP='Install Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" INSTALLING BINARIES"${C_NC}
echo '-----------------------------------------------------'
echo ''
make install-strip
}

# get version info from Makefile-----------------------------------------------
default_version() {
STEP='Get Version Info Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" GENERATE VERSION MARKER"${C_NC}
echo '-----------------------------------------------------'
echo ''
case "$APP_NAME" in 
    comptext)
        RELEASE=$(grep 'comptext_VERSION =' < Makefile |awk '{print $3}') ;;
    comptty)
        RELEASE=$(grep 'comptty_VERSION =' < Makefile |awk '{print $3}') ;;		
    fldigi)
        RELEASE=$(grep 'FLDIGI_VERSION =' < Makefile |awk '{print $3}') ;;
    flamp)
        RELEASE=$(grep 'FLAMP_VERSION =' < Makefile |awk '{print $3}') ;;
    fllog)
        RELEASE=$(grep 'FLLOG_VERSION =' < Makefile |awk '{print $3}') ;;
    flmsg)
        RELEASE=$(grep 'FLMSG_VERSION =' < Makefile |awk '{print $3}') ;;
    flnet)
        RELEASE=$(grep 'FLNET_VERSION =' < Makefile |awk '{print $3}') ;;
    flrig)
        RELEASE=$(grep 'FLRIG_VERSION =' < Makefile |awk '{print $3}') ;;
    flwkey)
        RELEASE=$(grep 'FLWKEY_VERSION =' < Makefile |awk '{print $3}') ;;
    flwrap)
    RELEASE=$(grep 'FLWRAP_VERSION =' < Makefile |awk '{print $3}') ;;
    linsim)
    RELEASE=$(grep 'linsim_VERSION =' < Makefile |awk '{print $3}') ;;
    *) ;;
esac
echo "* Created version marker for: $APP_NAME-$RELEASE"
}

# build_log_copy---------------------------------------------------------------
copy_build_logs() {
STEP='Copy Build Log Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" COPY LOG FILES ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo "* Copied config.log, Makefile to: $INSTALLD"
cp -u "$SRCD/$APP_NAME"/{config.log,Makefile} "$INSTALLD"
}

# install marker---------------------------------------------------------------
install_marker() {
STEP='Install Marker'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" GENERATING MARKERS"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo '* Removing old build marker'
rm -f "$INSTALLD/version.mkr" &>/dev/null
rm -f "$MKRD/$APP_NAME-version.mkr" &>/dev/null
echo '* Installing new version markers'
echo $RELEASE > "$INSTALLD/$APP_NAME-version.mkr"
echo $RELEASE > "$MKRD/$APP_NAME-version.mkr"
}

# change ownership-------------------------------------------------------------
change_ownership() {
STEP='Change Ownership Phase'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" VERIFY OWNERSHIP"${C_NC}
echo '-----------------------------------------------------'
echo ''
LOGNAME=$LOGNAME
LOGGRP=$(groups $LOGNAME | cut -d ' ' -f 3)
chown -R "$LOGNAME":"$LOGGRP" "$HOMEDIR/$APP_NAME"
echo "* Updated ownership to [ $LOGNAME ]"
}

# clean the build tree----------------------------------------------------------
clean_after_build() {
STEP='Clean Build Tree'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CLEANING BUILD TREE"${C_NC}
echo '-----------------------------------------------------'
echo ''
make clean &>/dev/null
echo '* Cleaned build tree with..: make clean'
make distclean &>/dev/null
git clean -qfd
echo '* Cleaned Git repo with....: git clean -qfd'
}

# finish build message---------------------------------------------------------
build_summary() {
STEP='Finish Build Message'
echo ''
echo '-----------------------------------------------------'
echo -e ${C_G}" BUILD SUMMARY"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo -e ' Link Config ..: '${C_G}"$LINK_TYPE"${C_NC}
echo " Version ......: $APP_NAME-$RELEASE"
echo " Source .......: $APP_SRC"
echo " Install ......: $INSTALLD"
echo ''
echo " TO RUN $APP_NAME"
echo " Type, ........: cd $INSTALLD/bin"
echo " Type, ........: ./$APP_NAME"
echo ''
cd "$HOMEDIR"
read -p "Press [ Enter ] to continue.."

}

# build the application
build_application() {
    APP_SRC="$SRCD/$APP_NAME"
    LINK_TYPE='Static'
    for f in ${default_build_array[@]} ; do "$f" ; done
    continue
}

# version check header---------------------------------------------------------
version_check() {
# TO-DO: v0.0.5 - Add pkg 'httping' to debian control file and meta packages
clear ||:
echo '-----------------------------------------------------'
echo -e ${C_G}"FLSDK Application Version Check"${C_NC}
echo '-----------------------------------------------------'

# check Internet connectivity--------------------------------------------------
((httping -t5 -c3 w1hkj.com || ping -t5 -c3 google.com || httping -t5 -c3 opendns.com) > /dev/null 2>&1) && \
    echo -e "* Internet ..... ${C_G}OK${C_NC}" || {
    echo ''
    echo -e ${C_R}'** INTERNET CONNECTION FAILURE**'${C_NC}
    echo ''
    echo 'You must have internet access inorder to'
    echo 'perform version checks. The following'
    echo 'test failed:'
    echo ''
    echo 'httping -t5 -c3 w1hkj.com || httping -t5 -c3 google.com || ping -t5 -c3 opendns.com'
    echo ''
    echo 'FLDIG Website ...: w1hkj.com'
    echo 'Google DNS ......: google.com'
    echo 'OpenDNS .........: opendns.com'
    echo ''
    echo 'Check you can access the internet, resolve any connection'
    echo "problems, then re-run Check Version"
    echo ''
    read -p "Press [ Enter ] to continue ..."
    exit 1
    }

# check if we can access SourceForge repositories------------------------------
((git ls-remote git://git.code.sf.net/p/fldigi/fldigi HEAD) > /dev/null 2>&1) && \
    echo -e "* Sourceforge .. ${C_G}OK${C_NC}" || {
    echo ''
    echo -e ${C_R}'** SOURCEFORGE CONNECTION FAILURE**'${C_NC}
    echo ''
    echo '@PROGRAM@ was unable to check the Git repository'
    echo 'on Sourceforge. This may be a temporary fault or'
    echo 'you may have internet connections issues.'
    echo ''
    echo 'If the problems presists, check that you can browse to the'
    echo 'Git Repo on SF, and chek their Net Operations messages on'
    echo 'on Twitter'
    echo ''
    read -p "Press [ Enter ] to continue ..."
    exit 1
    }

# now simply call the Python Script:
@PYTHON3@ @BINDIR@/flsdk-version

# pause after the python script finishes
read -p "Press [ Enter ] to continue ..."

}

###############################################################################
# MXE SPECIFIC FUNCTIONS
###############################################################################

# check if packages are already installed---------------------------WSL/NIX/MXE
mxe_package_check() {

    # reset installation array
    mxe_install_sys_pkg_array=()

    cd "$HOMEDIR"
    echo "-------------------------------------------"
    echo -e ${C_Y}" CHECKING PACKAGE INSTALL STATUS"${C_NC}
    echo "-------------------------------------------"
    for p in "${mxe_sys_pkg_array[@]}"
    do
        echo " Checking : $p"
        status=$(apt-cache policy $p | grep "Installed:" | awk '{print $2}')

        # if the policy check fails, add package to the install array
        if [[ $status = "(none)" ]]; then
        mxe_install_sys_pkg_array+=($p)
        fi
    done
    echo ""
}

# install packages found in mxe_install_sys_pkg_array()-------------WSL/NIX/MXE
mxe_sys_install() {

    installLength=${#mxe_install_sys_pkg_array[@]}

    if [[ $installLength -gt 0 ]]; then
        echo "-------------------------------------------"
        echo -e ${C_Y}" START PACKAGE INSTALLATION"${C_NC}
        echo "-------------------------------------------"
        echo ""
        sudo apt-get -q install -y $(echo "${mxe_install_sys_pkg_array[@]}")
    else
        echo "* Nothing to be done, no packages needed"
    fi
    echo ""
}

# clone MXE---------------------------------------------------------WSL/NIX/MXE
clone_mxe() {
    echo "-------------------------------------------"
    echo -e ${C_Y}" CHECKING INSTALL STATUS of MXE"${C_NC}
    echo "-------------------------------------------"
    cd "$HOMEDIR"
    echo ""
    if [[ -d $MXED/.git ]]; then
        echo "* Performing Git Pull Update"
        cd "$MXED"
        echo ""
        git pull
        cd "$HOMEDIR"
    else
        cd $BASED
        echo "* MXE not found. Cloining from Github --depth=1"
        echo ""
        git clone --depth=1 "$MXEURL"
    fi
    echo ""
}


# add hamlib.mk for packages.json file------------------------------WSL/NIX/MXE
add_hamlib_json() {
# TO-DO: v0.0.5 - Change location of hamlib.mk file to @SHARE@
    echo "-------------------------------------------"
    echo -e ${C_Y}" CHECKING HAMLIB JSON ENTRY"${C_NC}
    echo "-------------------------------------------"
    echo ""
    HLCHECK=$(cat $MXED/docs/packages.json | grep 'hamlib')
    if [[ $? -eq 0 ]]; then
        echo "* Hamlib entry is OK"
    else
        echo "* Adding hamlib entry to packages.json"
        sed -i '/guile/a \    \"hamlib": {"version": "3.1~git", "website": "http://n0nb.users.sourceforge.net/", "description": "Hamlib"},' $MXED/docs/packages.json
    fi 
    cp -u @SHARE@/hamlib.mk $MXED/src/
    echo ""
}

# build MXE binariles and libraries---------------------------------WSL/NIX/MXE
build_mxe() {
    cd "$MXED"
    echo "-------------------------------------------"
    echo -e ${C_Y}" START MXE PACKAGE BUILD"${C_NC}
    echo "-------------------------------------------"
    echo ""
    echo " * Directory: $(pwd)"
    echo " * Using [ $J1 ] parallel threads"
    echo " * Using [ $J2 ] simultaneous jobs"
    echo " * Checking MXE package build status"
    echo ""
    for i in "${mxe_pkg_array[@]}"
    do
        echo " Checking : $i"
        make JOBS=$J1 --jobs=$J2 $i
    done
    echo ""
    cd "$HOMEDIR"
}

# build Hamlib with MXE---------------------------------------------WSL/NIX/MXE
mxe_build_hamlib() {
# TO-DO: v0.0.5 - Add $MXED to configure ac, Makfile.in and flsdk.in. Add mxe.m4
    cd "$MXED"
    echo "-------------------------------------------"
    echo -e ${C_Y}" BUILD HAMLIB via MXE"${C_NC}
    echo "-------------------------------------------"
    echo ""
    echo " * Directory: $(pwd)"
    echo " * Using [ $J1 ] parallel threads"
    echo " * Using [ $J2 ] simultaneous jobs"
    echo " * Checking Hamlib package dependencies"
    echo ""
    for i in "${mxe_hamlib_array[@]}"
    do
        echo " Checking : $i"
        make JOBS=$J1 --jobs=$J2 $i
    done
    echo " Building : hamlib"
    make JOBS=$J1 --jobs=$J2 hamlib
    cd "$HOMEDIR"
    echo ""
}

# perform wsl package update--------------------------------------------WSL/MXE
wsl_sys_update() {
    cd "$HOMEDIR"
    clear
    echo "-------------------------------------------"
    echo -e ${C_Y}" WSL System Package Update and Upgrade"${C_NC}
    echo "-------------------------------------------"
    echo ""
    sudo apt-get update && sudo apt-get -y upgrade
    echo ""
}

# perform WSL system cleanup--------------------------------------------WSL/MXE
wsl_sys_cleanup() {
	cd "$HOMEDIR"
	echo "-------------------------------------------"
	echo -e ${C_Y}" WSL System Cleanup"${C_NC}
	echo "-------------------------------------------"
    echo ""
    sudo apt-get clean && sudo apt-get autoclean
}

# MXE remove junk and unused package files--------------------------WSL/NIX/MXE
mxe_clean() {
    cd "$MXED/mxe"
    echo "-------------------------------------------"
    echo " CLEANING MXE JUNK FILES"
    echo "-------------------------------------------"
    echo ""
    echo "* remove unused files, folders, and logs"
    make clean-junk > /dev/null 2>&1
    echo "* remove unused package files"
    make clean-pks > /dev/null 2>&1
    echo ""
    cd "$HOMEDIR"
}


# simple pause function---------------------------------------------WSL/NIX/MXE
# simple pause function
read_pause() {
    read -p "* Press [ Enter ] to continue..."
}


###############################################################################
# Start Main Script
###############################################################################

# set traps
trap sig_catch_cleanup SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP

# set shell options
set_options

# root check
root_chk

# dialog check
dialog_chk

# generate dialog rc
make_dialogrc

# menu help files
HELP="$DOCS/main_menu_help.txt"

# MAIN MENU--------------------------------------------------------------------

# set the menu selection variable
INPUT="$TMPD"/SLECTION.$$

# Linux Native Build Array
default_build_array=( 'build_header' 'git_check' 'get_version' \
'configure_header' 'set_installd' 'default_configure' 'default_make' 'default_install' \
'default_version' 'copy_build_logs' 'install_marker' 'change_ownership' \
'clean_after_build' 'build_summary')

# Linux Native MXE Build Array
# TO-DO: v0.0.5 - Add array for building Linux Native MXE Cross

# WSL Cross MXE Build Array
# TO-DO: v0.0.5 - Add array for building on WSK with MXE Cross

while [ 0 ]; do

dialog --clear --ok-label SELECT --nocancel --backtitle "$BACKTITLE" --title \
"$MMTITLE" --menu "$MENUMSG" 23 62 20 --file "$TMPD/MMenu.tmp" 2>"${INPUT}"

MSELECT=$(<"${INPUT}")

case "$MSELECT" in
    1) APP_NAME='comptty' ; build_application ;;
    2) APP_NAME='comptext' ; build_application ;;
    3) APP_NAME='fldigi' ; build_application ;;
    4) APP_NAME='flamp' ; build_application ;;
    5) APP_NAME='flmsg' ; build_application ;;
    6) APP_NAME='flrig' ; build_application ;;
    7) APP_NAME='flwkey' ; build_application ;;
    8) APP_NAME='fllog' ; build_application ;;
    9) APP_NAME='flnet' ; build_application ;;
    10) APP_NAME='flwrap' ; build_application ;;
    11) APP_NAME='linsim' ; build_application ;;
    V) version_check ; continue ;;
    H) dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$HTITLE" --textbox "$HELP" 20 80 ; continue ;;
    E) clean_exit ;;
esac

done

